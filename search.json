[{"path":[]},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement Martin Frigaard. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Martin Frigaard Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-dates.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Sanction dates","text":"vignette covers format wrangle sanction dates USADA sanctions table.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-dates.html","id":"data-versioning","dir":"Articles","previous_headings":"Motivation","what":"Data versioning","title":"Sanction dates","text":"package uses data table gets updated regularly. keep track versions, ’ve organized inst/extdata folder date (YYYY-MM-DD), helper function getting recent version: Now can use get_recent whenever need use find recently modified file folder! See examples :","code":"get_recent(\"../inst/extdata/raw\") #> ✔ The last modified date in '../inst/extdata/raw': 2023-01-22 #>        dstmp  #> \"2023-01-22\" get_recent(\"../inst/extdata/wada/\", full = TRUE) #> ✔ The last modified datetime in '../inst/extdata/wada/': 2023-01-22 14:37:51 #>                dtstmp  #> \"2023-01-22 14:37:51\""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-dates.html","id":"outline","dir":"Articles","previous_headings":"Motivation","what":"Outline","title":"Sanction dates","text":"vignette assumes following: Scrape website: copy USADA sanctions table scraped lives inst/extdata/raw/ folder See scrape_usada_sanctions() function scraping-usada.Rmd vignette information raw sanction data inst/extdata/raw folder: processed data column names formatted janitor::clean_names(), text converted lowercase","code":"#> ../inst/extdata/raw/ #> ├── 2023-01-20_usada_sanctions_raw.csv #> └── 2023-01-21_usada_sanctions_raw.csv ``` #>  [01;34m../inst/extdata/ [0m #> └── usada_sanctions_pro.csv ```"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-dates.html","id":"import-recent-data-file","dir":"Articles","previous_headings":"Motivation","what":"Import recent data file","title":"Sanction dates","text":"’ve written custom import function, get_recent_path(), helps locating/importing recent USADA data:","code":"get_recent_path(\"../inst/extdata/\", \"csv\") ✔ import code pasted to clipboard! ✔ use: readr::read_csv('../inst/extdata/usada_sanctions_pro.csv') usada_sanctions_pro <- readr::read_csv(                           file = '../inst/extdata/usada_sanctions_pro.csv') #> Rows: 895 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (5): athlete, sport, substance_reason, sanction_terms, sanction_announced #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dplyr::glimpse(usada_sanctions_pro) #> Rows: 895 #> Columns: 5 #> $ athlete            <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\"… #> $ sport              <chr> \"cycling\", \"cycling\", \"track and field\", \"cycling\",… #> $ substance_reason   <chr> \"non-analytical: refusal to submit to sample collec… #> $ sanction_terms     <chr> \"4-year suspension; loss of results\", \"4-year suspe… #> $ sanction_announced <chr> \"01/10/2023\", \"01/04/2023\", \"12/08/2022\", \"12/05/20…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-dates.html","id":"sanction-dates","dir":"Articles","previous_headings":"Motivation > Import recent data file","what":"Sanction dates","title":"Sanction dates","text":"need format dates sanction_announced actual date, check see ’re format. ones failed? Store bad_dates. can see ’ve stuffed two dates sanction_announced column 29 athletes: use tidyr::separate_rows() split dates original updated Remove excess colons white-space stringr::str_remove_all() filter original dates (want updated date) convert dates date anytime::anydate() take care single outlier (formatted two-year date) remove sanction_announced column (use sanction_date instead) Now want format dates usada_sanctions_pro using anytime::anydate(), filter missing sanction_dates didn’t parse, remove sanction_announced column, bind back good_dates table fixed sanction dates.","code":"dplyr::mutate(usada_sanctions_pro,    sanction_announced = lubridate::mdy(sanction_announced)) |>    utils::head(25) #> Warning: 29 failed to parse. #> # A tibble: 25 × 5 #>    athlete                       sport                subst…¹ sanct…² sanction…³ #>    <chr>                         <chr>                <chr>   <chr>   <date>     #>  1 \"montañez barroso, elias\"     cycling              non-an… 4-year… 2023-01-10 #>  2 \"ruiz-gutierrez, noslen\"      cycling              dexame… 4-year… 2023-01-04 #>  3 \"roberts, gil\"                track and field      andari… 16-mon… 2022-12-08 #>  4 \"andrew, sidney\"              cycling              5-meth… 12-mon… 2022-12-05 #>  5 \"rodriguez ocasio, christian\" weightlifting        heptam… 12-mon… 2022-11-30 #>  6 \"scherf, lindsey\"             track and field      androg… 4-year… 2022-11-29 #>  7 \"mead, hassan\"                track and field      ostari… 3-year… 2022-11-29 #>  8 \"evans, aja\"                  bobsled              non-an… 2-year… 2022-11-18 #>  9 \"scantling, garrett\"          track and field      non-an… 3-year… 2022-11-18 #> 10 \"provisor, ben\"               wrestling            amphet… 16-mon… 2022-11-15 #> 11 \"skoog, arika\"                boxing               furose… 1-year… 2022-10-26 #> 12 \"navarrete, rene\"             weightlifting        cannab… 3-mont… 2022-10-14 #> 13 \"green, bobby\"                mixed martial arts   dehydr… 6-mont… 2022-10-07 #> 14 \"guimarães, catarina\"         para track and field non-an… public… 2022-10-05 #> 15 \"bringas, joshua\"             weightlifting        heptam… 3-year… 2022-09-26 #> 16 \"zaleski dos santos, elizeu\"  mixed martial arts   ostari… 1-year… 2022-09-22 #> 17 \"ray, olivia\"                 cycling              human … 30-mon… 2022-09-22 #> 18 \"browne, richard\"             para track and field cannab… 3-mont… 2022-09-07 #> 19 \"hearn, timothy\"              weightlifting        19-nor… 3-year… 2022-09-06 #> 20 \"trujillo, nelson\"            cycling              non-an… 12-yea… 2022-09-02 #> 21 \"jordan, clint\"               weightlifting        anabol… 4-year… 2022-09-01 #> 22 \"coleman, ellis\"              wrestling            dehydr… 24-mon… 2022-08-31 #> 23 \"walker, gregory\"             para track and field cannab… 3-mont… 2022-08-16 #> 24 \"hattingh, riekert\"           rugby                tamoxi… 6-mont… 2022-08-11 #> 25 \"nash, jackson \\\"huntley\\\"\"   cycling              non-an… lifeti… 2022-08-10 #> # … with abbreviated variable names ¹​substance_reason, ²​sanction_terms, #> #   ³​sanction_announced bad_dates <- mutate(usada_sanctions_pro,    sanction_date = lubridate::mdy(sanction_announced)) |>    dplyr::filter(is.na(sanction_date) & !is.na(sanction_announced))  #> Warning: 29 failed to parse. bad_dates |>    dplyr::select(sanction_announced) |>    head(10) #> # A tibble: 10 × 1 #>    sanction_announced                        #>    <chr>                                     #>  1 original: 05/07/2019; updated: 02/04/2022 #>  2 original: 09/03/21; updated: 01/25/22     #>  3 original:  11/04/2019;updated: 05/17/2021 #>  4 original 12/20/2018; updated 11/04/2020   #>  5 original: 10/19/2020updated: 01/05/2021   #>  6 original: 09/05/2019; updated: 08/26/2020 #>  7 original: 07/22/2020, updated: 11/03/2022 #>  8 original 09/11/2018; updated 01/16/2020   #>  9 original: 06/17/2019; updated: 12/16/2019 #> 10 original: 10/31/2017; updated: 12/16/2019 good_dates <- tidyr::separate_rows(data = bad_dates,   sanction_announced, sep = \"updated\") |>   dplyr::mutate(sanction_date = stringr::str_remove_all(sanction_announced, \": \")) |>   dplyr::filter(!stringr::str_detect(sanction_date, \"^original\")) |>   dplyr::mutate(sanction_date = anytime::anydate(sanction_date)) |>   dplyr::mutate(     sanction_date = dplyr::case_when(       athlete == \"ngetich, eliud\" ~ lubridate::as_date(\"2022-01-25\"),       TRUE ~ sanction_date     )   ) |>   dplyr::select(-sanction_announced) good_dates |> glimpse() #> Rows: 29 #> Columns: 5 #> $ athlete          <chr> \"prempeh, ernest\", \"ngetich, eliud\", \"gehm, zach\", \"h… #> $ sport            <chr> \"weightlifting\", \"track and field\", \"track and field\"… #> $ substance_reason <chr> \"dhcmt, androgenic anabolic steroids; non-analytical:… #> $ sanction_terms   <chr> \"4-year suspension; loss of results; sanction tolled … #> $ sanction_date    <date> 2022-02-04, 2022-01-25, 2021-05-17, 2020-11-04, 2021… usada_dates <- dplyr::mutate(usada_sanctions_pro,      sanction_date = anytime::anydate(sanction_announced)) |>    dplyr::filter(!is.na(sanction_date)) |>    dplyr::select(-sanction_announced) |>    dplyr::bind_rows(good_dates)  dplyr::glimpse(usada_dates) #> Rows: 658 #> Columns: 5 #> $ athlete          <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\", … #> $ sport            <chr> \"cycling\", \"cycling\", \"track and field\", \"cycling\", \"… #> $ substance_reason <chr> \"non-analytical: refusal to submit to sample collecti… #> $ sanction_terms   <chr> \"4-year suspension; loss of results\", \"4-year suspens… #> $ sanction_date    <date> 2023-01-10, 2023-01-04, 2022-12-08, 2022-12-05, 2022…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-dates.html","id":"export","dir":"Articles","previous_headings":"Motivation","what":"Export","title":"Sanction dates","text":"Verify","code":"export_extdata(   x = usada_dates,    inst_path = \"../inst/\",    raw = FALSE) #> ℹ Exporting data: usada_dates #> ✔ Exporting data: usada_dates ... done #>  #> ✔ Data successfully exported! fs::dir_tree(\"../inst/extdata/\", regexp = \"dates\") #> ../inst/extdata/ #> └── usada_dates.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Sanction sports","text":"vignette covers sports listed USADA sanctions table.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"data-versioning","dir":"Articles","previous_headings":"","what":"Data versioning","title":"Sanction sports","text":"dopingdata uses data tables get updated regularly, keep track versions, ’ve organized inst/extdata folder date (YYYY-MM-DD). also helper function finding date recent file:","code":"get_recent(\"../inst/extdata/raw\") #> ✔ The last modified date in '../inst/extdata/raw': 2023-01-22 #>        dstmp  #> \"2023-01-22\""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Sanction sports","text":"vignette assumes following: Harvest data: copy USADA sanctions table scraped lives inst/extdata/raw/ inst/extdata/pro/ folders See scrape_usada_sanctions() function scraping-usada-sanctions.Rmd vignette information data column names formatted janitor::clean_names(), text converted lowercase Fix dates: dates table formatted wrangled See vignettes/sanction-dates.Rmd vignette information","code":"#> ../inst/extdata/raw/ #> ├── 2023-01-20_usada_sanctions_raw.csv #> └── 2023-01-21_usada_sanctions_raw.csv #> ../inst/extdata/ #> └── usada_sanctions_pro.csv #> ../inst/extdata/ #> └── usada_dates.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"data","dir":"Articles","previous_headings":"Outline","what":"Data","title":"Sanction sports","text":"’m going locate recently wrangled data file inst/extdata/ folder: path clipboard exported data vignettes/sanction-dates.Rmd (, please head vignette fix dates moving forward).","code":"get_recent_path(   folder = \"../inst/extdata/\",    type = \"csv\") ✔ import code pasted to clipboard! ✔ use: readr::read_csv('../inst/extdata/usada_dates.csv') sanctions <- readr::read_csv(   file = '../inst/extdata/usada_dates.csv') #> Rows: 658 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (4): athlete, sport, substance_reason, sanction_terms #> date (1): sanction_date #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dplyr::glimpse(sanctions) #> Rows: 658 #> Columns: 5 #> $ athlete          <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\", … #> $ sport            <chr> \"cycling\", \"cycling\", \"track and field\", \"cycling\", \"… #> $ substance_reason <chr> \"non-analytical: refusal to submit to sample collecti… #> $ sanction_terms   <chr> \"4-year suspension; loss of results\", \"4-year suspens… #> $ sanction_date    <date> 2023-01-10, 2023-01-04, 2022-12-08, 2022-12-05, 2022…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"sport-counts-raw","dir":"Articles","previous_headings":"","what":"sport counts (raw)","title":"Sanction sports","text":"","code":"sanctions |>    dplyr::count(sport, sort = TRUE) #> # A tibble: 69 × 2 #>    sport                                           n #>    <chr>                                       <int> #>  1 cycling                                       132 #>  2 mixed martial arts                            128 #>  3 weightlifting                                 116 #>  4 track and field                                99 #>  5 wrestling                                      15 #>  6 triathlon                                      14 #>  7 paralympic track and field                     11 #>  8 swimming                                       10 #>  9 boxing                                          8 #> 10 brazilian jiu-jitsu                             7 #> 11 cycling - athlete support personnel             6 #> 12 rowing                                          6 #> 13 taekwondo                                       6 #> 14 track and field - athlete support personnel     6 #> 15 bobsled and skeleton                            5 #> 16 ice hockey                                      5 #> 17 judo                                            5 #> 18 paralympic judo                                 4 #> 19 archery                                         3 #> 20 cycling, triathlon                              3 #> 21 karate                                          3 #> 22 para track and field                            3 #> 23 paralympic cycling                              3 #> 24 rugby                                           3 #> 25 speedskating                                    3 #> # … with 44 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"athlete-support-personnel","dir":"Articles","previous_headings":"sport counts (raw)","what":"athlete support personnel","title":"Sanction sports","text":"’ll create identifier athlete support personnel, support_personnel.","code":"dplyr::mutate(sanctions,    # support_personnel   support_personnel =      dplyr::if_else(condition = stringr::str_detect(sport, \"support personnel\"),        true = TRUE, false = FALSE, missing = NA)) |>    dplyr::count(sport, support_personnel) |>    tidyr::pivot_wider(names_from = support_personnel, values_from = n) #> # A tibble: 69 × 3 #>    sport                                           `FALSE` `TRUE` #>    <chr>                                             <int>  <int> #>  1 archery                                               3     NA #>  2 baseball                                              1     NA #>  3 bobsled                                               1     NA #>  4 bobsled and skeleton                                  5     NA #>  5 bobsled and skeleton, track and field                 1     NA #>  6 boccia                                                2     NA #>  7 bowling                                               1     NA #>  8 boxing                                                8     NA #>  9 brazilian jiu-jitsu                                   7     NA #> 10 brazilian jiu-jitsu - athlete support personnel      NA      1 #> 11 brazillian jiu-jitsu                                  1     NA #> 12 canoe                                                 1     NA #> 13 cycling                                             132     NA #> 14 cycling - athlete support personnel                  NA      6 #> 15 cycling, triathlon                                    3     NA #> 16 cycling, weightlifting                                1     NA #> 17 diving                                                2     NA #> 18 equestrian                                            1     NA #> 19 field hockey                                          1     NA #> 20 gymnastics                                            1     NA #> 21 ice hockey                                            5     NA #> 22 judo                                                  5     NA #> 23 karate                                                3     NA #> 24 luge                                                  1     NA #> 25 mixed martial arts                                  128     NA #> # … with 44 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"track-and-field","dir":"Articles","previous_headings":"sport counts (raw)","what":"track and field","title":"Sanction sports","text":"’m going convert track field track & field (help determine athletes/support personnel involved multiple sports).","code":"dplyr::mutate(sanctions,   # support_personnel   support_personnel =      dplyr::if_else(condition = stringr::str_detect(sport, \"support personnel\"),        true = TRUE, false = FALSE, missing = NA),   # track & field   sport = stringr::str_replace_all(sport, 'track and field', 'track & field')) |>    dplyr::count(sport, sort = TRUE) #> # A tibble: 68 × 2 #>    sport                                         n #>    <chr>                                     <int> #>  1 cycling                                     132 #>  2 mixed martial arts                          128 #>  3 weightlifting                               116 #>  4 track & field                               101 #>  5 wrestling                                    15 #>  6 triathlon                                    14 #>  7 paralympic track & field                     11 #>  8 swimming                                     10 #>  9 boxing                                        8 #> 10 brazilian jiu-jitsu                           7 #> 11 cycling - athlete support personnel           6 #> 12 rowing                                        6 #> 13 taekwondo                                     6 #> 14 track & field - athlete support personnel     6 #> 15 bobsled and skeleton                          5 #> 16 ice hockey                                    5 #> 17 judo                                          5 #> 18 paralympic judo                               4 #> 19 archery                                       3 #> 20 cycling, triathlon                            3 #> 21 karate                                        3 #> 22 para track & field                            3 #> 23 paralympic cycling                            3 #> 24 rugby                                         3 #> 25 speedskating                                  3 #> # … with 43 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"brazilian-jiu-jitsu","dir":"Articles","previous_headings":"sport counts (raw)","what":"brazilian jiu-jitsu","title":"Sanction sports","text":"incorrect spelling brazilian jiu-jitsu (brazillian jiu-jitsu), correct :","code":"dplyr::mutate(sanctions,    # # support_personnel   support_personnel =      dplyr::if_else(condition = stringr::str_detect(sport, \"support personnel\"),        true = TRUE, false = FALSE, missing = NA),   # track & field   sport = stringr::str_replace_all(sport, 'track and field', 'track & field'),   # brazilian jiu-jitsu   sport = dplyr::case_when(     sport == 'brazillian jiu-jitsu' ~ 'brazilian jiu-jitsu',     TRUE ~ sport)) |>    dplyr::count(sport, sort = TRUE) #> # A tibble: 67 × 2 #>    sport                                         n #>    <chr>                                     <int> #>  1 cycling                                     132 #>  2 mixed martial arts                          128 #>  3 weightlifting                               116 #>  4 track & field                               101 #>  5 wrestling                                    15 #>  6 triathlon                                    14 #>  7 paralympic track & field                     11 #>  8 swimming                                     10 #>  9 boxing                                        8 #> 10 brazilian jiu-jitsu                           8 #> 11 cycling - athlete support personnel           6 #> 12 rowing                                        6 #> 13 taekwondo                                     6 #> 14 track & field - athlete support personnel     6 #> 15 bobsled and skeleton                          5 #> 16 ice hockey                                    5 #> 17 judo                                          5 #> 18 paralympic judo                               4 #> 19 archery                                       3 #> 20 cycling, triathlon                            3 #> 21 karate                                        3 #> 22 para track & field                            3 #> 23 paralympic cycling                            3 #> 24 rugby                                         3 #> 25 speedskating                                  3 #> # … with 42 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"paralympic","dir":"Articles","previous_headings":"sport counts (raw)","what":"paralympic","title":"Sanction sports","text":"’ll also create identifier paralympic sports, paralympic.","code":"dplyr::mutate(sanctions,    # support_personnel   support_personnel =      dplyr::if_else(condition = stringr::str_detect(sport, \"support personnel\"),        true = TRUE, false = FALSE, missing = NA),   # track & field   sport = stringr::str_replace_all(sport, 'track and field', 'track & field'),   # brazilian jiu-jitsu   sport = dplyr::case_when(     sport == 'brazillian jiu-jitsu' ~ 'brazilian jiu-jitsu',     TRUE ~ sport),   # paralympic   paralympic =      dplyr::if_else(condition = stringr::str_detect(sport, \"paralympic|para\"),        true = TRUE, false = FALSE, missing = NA)) |>    dplyr::count(paralympic, sport) |>    tidyr::pivot_wider(names_from = paralympic, values_from = n) #> # A tibble: 67 × 3 #>    sport                                           `FALSE` `TRUE` #>    <chr>                                             <int>  <int> #>  1 archery                                               3     NA #>  2 baseball                                              1     NA #>  3 bobsled                                               1     NA #>  4 bobsled and skeleton                                  5     NA #>  5 bobsled and skeleton, track & field                   1     NA #>  6 boccia                                                2     NA #>  7 bowling                                               1     NA #>  8 boxing                                                8     NA #>  9 brazilian jiu-jitsu                                   8     NA #> 10 brazilian jiu-jitsu - athlete support personnel       1     NA #> 11 canoe                                                 1     NA #> 12 cycling                                             132     NA #> 13 cycling - athlete support personnel                   6     NA #> 14 cycling, triathlon                                    3     NA #> 15 cycling, weightlifting                                1     NA #> 16 diving                                                2     NA #> 17 equestrian                                            1     NA #> 18 field hockey                                          1     NA #> 19 gymnastics                                            1     NA #> 20 ice hockey                                            5     NA #> 21 judo                                                  5     NA #> 22 karate                                                3     NA #> 23 luge                                                  1     NA #> 24 mixed martial arts                                  128     NA #> 25 pentathlon                                            1     NA #> # … with 42 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"multiple_sports","dir":"Articles","previous_headings":"sport counts (raw)","what":"multiple_sports","title":"Sanction sports","text":"Now can identify multiple sports using , regular expression.","code":"dplyr::mutate(sanctions,    # support_personnel   support_personnel =      if_else(condition = stringr::str_detect(sport, \"support personnel\"),        true = TRUE, false = FALSE, missing = NA),   # track & field   sport = stringr::str_replace_all(sport, 'track and field', 'track & field'),   # brazilian jiu-jitsu   sport = case_when(     sport == 'brazillian jiu-jitsu' ~ 'brazilian jiu-jitsu',     TRUE ~ sport),   # multiple_sports   multiple_sports =      if_else(condition = stringr::str_detect(sport, \"and |, \"),        true = TRUE, false = FALSE, missing = NA),   # paralympic   paralympic =      if_else(condition = stringr::str_detect(sport, \"paralympic|para\"),        true = TRUE, false = FALSE, missing = NA)) |>    dplyr::count(multiple_sports, sport) |>    tidyr::pivot_wider(names_from = multiple_sports, values_from = n) #> # A tibble: 67 × 3 #>    sport                                           `FALSE` `TRUE` #>    <chr>                                             <int>  <int> #>  1 archery                                               3     NA #>  2 baseball                                              1     NA #>  3 bobsled                                               1     NA #>  4 boccia                                                2     NA #>  5 bowling                                               1     NA #>  6 boxing                                                8     NA #>  7 brazilian jiu-jitsu                                   8     NA #>  8 brazilian jiu-jitsu - athlete support personnel       1     NA #>  9 canoe                                                 1     NA #> 10 cycling                                             132     NA #> 11 cycling - athlete support personnel                   6     NA #> 12 diving                                                2     NA #> 13 equestrian                                            1     NA #> 14 field hockey                                          1     NA #> 15 gymnastics                                            1     NA #> 16 ice hockey                                            5     NA #> 17 judo                                                  5     NA #> 18 karate                                                3     NA #> 19 luge                                                  1     NA #> 20 mixed martial arts                                  128     NA #> 21 para shooting                                         1     NA #> 22 para track & field                                    3     NA #> 23 paralympic archery                                    2     NA #> 24 paralympic basketball                                 2     NA #> 25 paralympic boccia                                     1     NA #> # … with 42 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"sanctions_sports","dir":"Articles","previous_headings":"","what":"sanctions_sports","title":"Sanction sports","text":"’ll store new variables sanctions_sports","code":"sanctions_sports <- dplyr::mutate(sanctions,    # support_personnel   support_personnel =      dplyr::if_else(condition = stringr::str_detect(sport, \"support personnel\"),        true = TRUE, false = FALSE, missing = NA),   # track & field   sport = stringr::str_replace_all(sport, 'track and field', 'track & field'),   # brazilian jiu-jitsu   sport = case_when(     sport == 'brazillian jiu-jitsu' ~ 'brazilian jiu-jitsu',     TRUE ~ sport),   # multiple_sports   multiple_sports =      dplyr::if_else(condition = stringr::str_detect(sport, \"and |, \"),        true = TRUE, false = FALSE, missing = NA),   # paralympic   paralympic =      dplyr::if_else(condition = stringr::str_detect(sport, \"paralympic|para\"),        true = TRUE, false = FALSE, missing = NA))  dplyr::glimpse(sanctions_sports) #> Rows: 658 #> Columns: 8 #> $ athlete           <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\",… #> $ sport             <chr> \"cycling\", \"cycling\", \"track & field\", \"cycling\", \"w… #> $ substance_reason  <chr> \"non-analytical: refusal to submit to sample collect… #> $ sanction_terms    <chr> \"4-year suspension; loss of results\", \"4-year suspen… #> $ sanction_date     <date> 2023-01-10, 2023-01-04, 2022-12-08, 2022-12-05, 202… #> $ support_personnel <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ multiple_sports   <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ paralympic        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"multiple-sports","dir":"Articles","previous_headings":"sanctions_sports","what":"Multiple sports","title":"Sanction sports","text":"athletes listed multiple sports, means ’ll occupy multiple rows ‘tidy’ version dataset. can check using count() verify one athlete sport:","code":"sanctions_sports |>    dplyr::filter(multiple_sports == TRUE) |>    tidyr::separate_rows(sport, sep = \"and|, \") |>    dplyr::count(athlete, sport) #> # A tibble: 31 × 3 #>    athlete                  sport                          n #>    <chr>                    <chr>                      <int> #>  1 allison, kyler           \" skeleton\"                    1 #>  2 allison, kyler           \"bobsled \"                     1 #>  3 bailey, ryan             \" skeleton\"                    1 #>  4 bailey, ryan             \"bobsled \"                     1 #>  5 bailey, ryan             \"track & field\"                1 #>  6 bascio, monica           \"paralympic cycling\"           1 #>  7 bascio, monica           \"paralympic nordic skiing\"     1 #>  8 blandford, jenna         \"cycling\"                      1 #>  9 blandford, jenna         \"triathlon\"                    1 #> 10 cruse, j.c.              \" skeleton\"                    1 #> 11 cruse, j.c.              \"bobsled \"                     1 #> 12 denney phillips, jessica \"cycling\"                      1 #> 13 denney phillips, jessica \"weightlifting\"                1 #> 14 dodson, amy              \"paralympic track & field\"     1 #> 15 dodson, amy              \"paralympic triathlon\"         1 #> 16 flanagan, tyler          \" snowboarding\"                1 #> 17 flanagan, tyler          \"skiing \"                      1 #> 18 green, roderick          \"paralympic track & field\"     1 #> 19 green, roderick          \"paralympic volleyball\"        1 #> 20 hamilton, tyler          \"cycling\"                      1 #> 21 hamilton, tyler          \"triathlon\"                    1 #> 22 ives, kevin              \" skeleton\"                    1 #> 23 ives, kevin              \"bobsled \"                     1 #> 24 jones, randy             \" skeleton\"                    1 #> 25 jones, randy             \"bobsled \"                     1 #> # … with 6 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"tidy_multp_sports","dir":"Articles","previous_headings":"sanctions_sports","what":"tidy_multp_sports","title":"Sanction sports","text":"’ll remove white-space left tidyr::separate_rows() stringr::str_trim() create tidy_multp_sports.","code":"tidy_multp_sports <- sanctions_sports |>    dplyr::filter(multiple_sports == TRUE) |>    tidyr::separate_rows(sport, sep = \"and|, \") |>    dplyr::mutate(sport = stringr::str_trim(sport, side = \"both\")) glimpse(tidy_multp_sports) #> Rows: 31 #> Columns: 8 #> $ athlete           <chr> \"allison, kyler\", \"allison, kyler\", \"blandford, jenn… #> $ sport             <chr> \"bobsled\", \"skeleton\", \"cycling\", \"triathlon\", \"bobs… #> $ substance_reason  <chr> \"non-analytical: refusal to submit to sample collect… #> $ sanction_terms    <chr> \"4-year suspension; loss of results; sanction tolled… #> $ sanction_date     <date> 2019-10-09, 2019-10-09, 2017-11-28, 2017-11-28, 201… #> $ support_personnel <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ multiple_sports   <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE… #> $ paralympic        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"single_usada_sports","dir":"Articles","previous_headings":"sanctions_sports","what":"single_usada_sports","title":"Sanction sports","text":"need remove single occurrences athletes sanctions_sports replace tidy athlete names. Verify aren’t duplicates single_usada_sports (zero rows )","code":"multp_sports_athletes <- unique(tidy_multp_sports['athlete']) single_usada_sports <- dplyr::filter(sanctions_sports,                                          athlete %nin% multp_sports_athletes) single_usada_sports |>    dplyr::count(athlete, sanction_date, sport) |>    dplyr::filter(n > 1) #> # A tibble: 0 × 4 #> # … with 4 variables: athlete <chr>, sanction_date <date>, sport <chr>, n <int>"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"tidy_sports","dir":"Articles","previous_headings":"","what":"tidy_sports","title":"Sanction sports","text":"Now combine tidy_sports verify aren’t duplicates (). Ready export!","code":"tidy_sports <- dplyr::bind_rows(single_usada_sports, tidy_multp_sports) tidy_sports |>    dplyr::count(athlete, sanction_date, sport) |>    dplyr::filter(n > 1) #> # A tibble: 0 × 4 #> # … with 4 variables: athlete <chr>, sanction_date <date>, sport <chr>, n <int> dplyr::glimpse(tidy_sports) #> Rows: 689 #> Columns: 8 #> $ athlete           <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\",… #> $ sport             <chr> \"cycling\", \"cycling\", \"track & field\", \"cycling\", \"w… #> $ substance_reason  <chr> \"non-analytical: refusal to submit to sample collect… #> $ sanction_terms    <chr> \"4-year suspension; loss of results\", \"4-year suspen… #> $ sanction_date     <date> 2023-01-10, 2023-01-04, 2022-12-08, 2022-12-05, 202… #> $ support_personnel <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ multiple_sports   <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ paralympic        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/sanction-sports.html","id":"export-tidy_sports","dir":"Articles","previous_headings":"","what":"Export tidy_sports","title":"Sanction sports","text":"Verify CHECK: Can can see dates sports data data folder?","code":"export_extdata(   x = tidy_sports,    inst_path = \"../inst/\",    raw = FALSE) #> ℹ Exporting data: tidy_sports #> ✔ Exporting data: tidy_sports ... done #>  #> ✔ Data successfully exported! fs::dir_tree(\"../inst/extdata/\", regexp = \"tidy_sports|dates\") #> ../inst/extdata/ #> ├── tidy_sports.csv #> └── usada_dates.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"usada-prohibited-association-data","dir":"Articles","previous_headings":"","what":"USADA prohibited association data","title":"Scraping USADA prohibited associations","text":"data ’ll downloading comes USADA prohibited association table.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"use-your-manners","dir":"Articles","previous_headings":"","what":"Use your manners","title":"Scraping USADA prohibited associations","text":"package built top efforts fine people collected, organized, shared data, ’re going use polite package harvesting HTML tables. install package, run code : polite many options ethically scraping data (check package website information), ’ve chosen follow handy polite template:","code":"remotes::install_github(\"dmi3kno/polite\") library(polite) polite::use_manners()"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"check-robots-txt","dir":"Articles","previous_headings":"Use your manners","what":"Check robots.txt","title":"Scraping USADA prohibited associations","text":"’ll check robots.txt file scraping website: paths TRUE. ’ll also check domain robotstxt::get_robotstxt(): can see Allow: / configuration gives us access download data.","code":"# retrieval rtxt <- robotstxt::robotstxt(domain = \"https://www.usada.org/\")  # printing rtxt$check(   paths = c(\"news/\",              \"news/prohibited-association/\"),   bot   = \"*\" ) #> [1] TRUE TRUE rt <- robotstxt::get_robotstxt(   domain = \"https://www.usada.org/news/prohibited-association/\") # printing cat(rt[1]) #> # robots.txt overwrite by: on_suspect_content #>  #> User-agent: * #> Allow: /"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"scraping-with-polite-and-rvest","dir":"Articles","previous_headings":"Use your manners","what":"Scraping with polite and rvest","title":"Scraping USADA prohibited associations","text":"steps used scrape prohibited associations table:","code":"usada_url = \"https://www.usada.org/news/prohibited-association/\" usada_nodes <- polite::bow(usada_url) |>    polite::scrape() |>    rvest::html_nodes(\"table\")  usada_prohib_assoc_raw <- rvest::html_table(usada_nodes[[1]]) dplyr::glimpse(usada_prohib_assoc_raw) #> Rows: 18 #> Columns: 2 #> $ NAME                            <chr> \"Chavez, Bernabe\", \"Prempeh, Ernest\", … #> $ `SUSPENSION ENDS\\n(mm/dd/yyyy)` <chr> \"09/01/2025\", \"Indefinite*\", \"07/26/20…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"process-text","dir":"Articles","previous_headings":"","what":"Process text","title":"Scraping USADA prohibited associations","text":"process_text() function lowercase text dataset. also applies janitor::clean_names() column names:","code":"usada_prohib_assoc_pro <- process_text(usada_prohib_assoc_raw) dplyr::glimpse(usada_prohib_assoc_pro) #> Rows: 18 #> Columns: 2 #> $ name                       <chr> \"chavez, bernabe\", \"prempeh, ernest\", \"dani… #> $ suspension_ends_mm_dd_yyyy <chr> \"09/01/2025\", \"indefinite*\", \"07/26/2025\", …"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"column-names","dir":"Articles","previous_headings":"Process text","what":"Column names","title":"Scraping USADA prohibited associations","text":"can change name suspension_ends_mm_dd_yyyy suspend_end:","code":"dplyr::rename(usada_prohib_assoc_pro,    suspend_end = suspension_ends_mm_dd_yyyy) #> # A tibble: 18 × 2 #>    name                 suspend_end #>    <chr>                <chr>       #>  1 chavez, bernabe      09/01/2025  #>  2 prempeh, ernest      indefinite* #>  3 daniels, jamaal      07/26/2025  #>  4 pearson, keir        lifetime    #>  5 glasgow, scott       08/09/2023  #>  6 brown, jeffrey       09/29/2023  #>  7 salazar, alberto     09/29/2023  #>  8 bell, kenta          lifetime    #>  9 gingras, michael     01/15/2029  #> 10 drummond, jon        12/16/2022  #> 11 bruyneel, johan      lifetime    #> 12 marti, jose          06/11/2027  #> 13 celaya lazama, pedro lifetime    #> 14 ferrari, dr. michele lifetime    #> 15 leinders, dr. geert  lifetime    #> 16 korchemny, remi      lifetime    #> 17 stewart, raymond     lifetime    #> 18 graham, trevor       lifetime"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"suspend_type","dir":"Articles","previous_headings":"Process text","what":"suspend_type","title":"Scraping USADA prohibited associations","text":"Create indicator variable (suspend_type) three categories suspensions: temporary, lifetime indefinite*","code":"dplyr::rename(usada_prohib_assoc_pro,    suspend_end = suspension_ends_mm_dd_yyyy) |>    dplyr::mutate(     suspend_type = dplyr::case_when(       stringr::str_detect(suspend_end, \"lifetime\") ~ \"lifetime\",       stringr::str_detect(suspend_end, \"indefinite*\") ~ \"indefinite*\",       TRUE ~ \"temporary\")) #> # A tibble: 18 × 3 #>    name                 suspend_end suspend_type #>    <chr>                <chr>       <chr>        #>  1 chavez, bernabe      09/01/2025  temporary    #>  2 prempeh, ernest      indefinite* indefinite*  #>  3 daniels, jamaal      07/26/2025  temporary    #>  4 pearson, keir        lifetime    lifetime     #>  5 glasgow, scott       08/09/2023  temporary    #>  6 brown, jeffrey       09/29/2023  temporary    #>  7 salazar, alberto     09/29/2023  temporary    #>  8 bell, kenta          lifetime    lifetime     #>  9 gingras, michael     01/15/2029  temporary    #> 10 drummond, jon        12/16/2022  temporary    #> 11 bruyneel, johan      lifetime    lifetime     #> 12 marti, jose          06/11/2027  temporary    #> 13 celaya lazama, pedro lifetime    lifetime     #> 14 ferrari, dr. michele lifetime    lifetime     #> 15 leinders, dr. geert  lifetime    lifetime     #> 16 korchemny, remi      lifetime    lifetime     #> 17 stewart, raymond     lifetime    lifetime     #> 18 graham, trevor       lifetime    lifetime"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"suspend_end","dir":"Articles","previous_headings":"Process text","what":"suspend_end","title":"Scraping USADA prohibited associations","text":"suspend_end contains dates represent date suspension ends.","code":"dplyr::rename(usada_prohib_assoc_pro,    suspend_end = suspension_ends_mm_dd_yyyy) |>    dplyr::mutate(     suspend_type = dplyr::case_when(       stringr::str_detect(suspend_end, \"lifetime\") ~ \"lifetime\",       stringr::str_detect(suspend_end, \"indefinite*\") ~ \"indefinite*\",       TRUE ~ \"temporary\"),     suspend_end = dplyr::case_when(       stringr::str_detect(suspend_end, \"lifetime|indefinite*\") ~ NA_character_,       TRUE ~ suspend_end),     suspend_end = lubridate::mdy(suspend_end)) #> # A tibble: 18 × 3 #>    name                 suspend_end suspend_type #>    <chr>                <date>      <chr>        #>  1 chavez, bernabe      2025-09-01  temporary    #>  2 prempeh, ernest      NA          indefinite*  #>  3 daniels, jamaal      2025-07-26  temporary    #>  4 pearson, keir        NA          lifetime     #>  5 glasgow, scott       2023-08-09  temporary    #>  6 brown, jeffrey       2023-09-29  temporary    #>  7 salazar, alberto     2023-09-29  temporary    #>  8 bell, kenta          NA          lifetime     #>  9 gingras, michael     2029-01-15  temporary    #> 10 drummond, jon        2022-12-16  temporary    #> 11 bruyneel, johan      NA          lifetime     #> 12 marti, jose          2027-06-11  temporary    #> 13 celaya lazama, pedro NA          lifetime     #> 14 ferrari, dr. michele NA          lifetime     #> 15 leinders, dr. geert  NA          lifetime     #> 16 korchemny, remi      NA          lifetime     #> 17 stewart, raymond     NA          lifetime     #> 18 graham, trevor       NA          lifetime"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"usada_proh_assoc_pro","dir":"Articles","previous_headings":"","what":"usada_proh_assoc_pro","title":"Scraping USADA prohibited associations","text":"resulting processed dataset named usada_proh_assoc_pro exported inst/extdata/","code":"usada_proh_assoc_pro <- dplyr::rename(usada_prohib_assoc_pro,    suspend_end = suspension_ends_mm_dd_yyyy) |>    dplyr::mutate(suspend_type = dplyr::case_when(       stringr::str_detect(suspend_end, \"lifetime\") ~ \"lifetime\",       stringr::str_detect(suspend_end, \"indefinite*\") ~ \"indefinite*\",       TRUE ~ \"temporary\"),     suspend_end = dplyr::case_when(       stringr::str_detect(suspend_end, \"lifetime|indefinite*\") ~ NA_character_,       TRUE ~ suspend_end),     suspend_end = lubridate::mdy(suspend_end)) dplyr::glimpse(usada_proh_assoc_pro) #> Rows: 18 #> Columns: 3 #> $ name         <chr> \"chavez, bernabe\", \"prempeh, ernest\", \"daniels, jamaal\", … #> $ suspend_end  <date> 2025-09-01, NA, 2025-07-26, NA, 2023-08-09, 2023-09-29, … #> $ suspend_type <chr> \"temporary\", \"indefinite*\", \"temporary\", \"lifetime\", \"tem…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"export-raw-data","dir":"Articles","previous_headings":"","what":"Export raw data","title":"Scraping USADA prohibited associations","text":"’ll export raw data inst/extdata/raw/ folder using export_extdata() Verify:","code":"export_extdata(   x = usada_prohib_assoc_raw,    inst_path = \"../inst/\",    raw = TRUE) #> ℹ Exporting raw data: usada_prohib_assoc_raw #> ✔ Exporting raw data: usada_prohib_assoc_raw ... done #>  #> ✔ Raw data successfully exported! fs::dir_tree(   path = \"../inst/extdata/raw/\",    regexp = \"assoc_raw\"   ) #> ../inst/extdata/raw/ #> ├── 2023-01-20_usada_prohib_assoc_raw.csv #> ├── 2023-01-21_usada_prohib_assoc_raw.csv #> └── 2023-01-22_usada_prohib_assoc_raw.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-proh-assoc.html","id":"export-processed-data","dir":"Articles","previous_headings":"","what":"Export processed data","title":"Scraping USADA prohibited associations","text":"want export processed data inst/extdata/ folder, can using export_extdata(raw = FALSE) Verify:","code":"export_extdata(   x = usada_prohib_assoc_pro,    inst_path = \"../inst/\", raw = FALSE) #> ℹ Exporting data: usada_prohib_assoc_pro #> ✔ Exporting data: usada_prohib_assoc_pro ... done #>  #> ✔ Data successfully exported! fs::dir_tree(path = \"../inst/extdata/\",    regexp = \"assoc_pro\") #> ../inst/extdata/ #> └── usada_prohib_assoc_pro.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"usada-sanction-data","dir":"Articles","previous_headings":"","what":"USADA sanction data","title":"Scraping USADA sanctions","text":"data ’ll downloading comes USADA sanctions table.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"use-your-manners","dir":"Articles","previous_headings":"","what":"Use your manners","title":"Scraping USADA sanctions","text":"package built top efforts fine people collected, organized, shared data, ’re going use polite package harvesting HTML tables. install package, run code : polite many options ethically scraping data (check package website information), ’ve chosen follow handy polite template:","code":"remotes::install_github(\"dmi3kno/polite\") library(polite) polite::use_manners()"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"check-robots-txt","dir":"Articles","previous_headings":"Use your manners","what":"Check robots.txt","title":"Scraping USADA sanctions","text":"’ll check robots.txt file scraping website: three paths TRUE, also check domain robotstxt::get_robotstxt(): can see Allow: / configuration gives us access download data.","code":"# retrieval rtxt <- robotstxt::robotstxt(domain = \"https://www.usada.org/\")  # printing rtxt$check(   # check permissions    paths = c(\"testing/\",              \"testing/results/\",              \"testing/results/sanctions/\"),   # bots   bot   = \"*\" ) #> [1] TRUE TRUE TRUE rt <- robotstxt::get_robotstxt(   domain = \"https://www.usada.org/testing/results/sanctions/\") # printing cat(rt[1]) #> # robots.txt overwrite by: on_suspect_content #>  #> User-agent: * #> Allow: /"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"scraping-with-polite-and-rvest","dir":"Articles","previous_headings":"Use your manners","what":"Scraping with polite and rvest","title":"Scraping USADA sanctions","text":"steps used scrape sanctions table: raw data look like? can also use scrape_usada_sanctions() function.","code":"usada_url = \"https://www.usada.org/testing/results/sanctions/\" usada_nodes <- polite::bow(usada_url) |>    polite::scrape() |>    rvest::html_nodes(\"table\")  usada_sanctions_raw <- rvest::html_table(usada_nodes[[1]]) dplyr::glimpse(usada_sanctions_raw) #> Rows: 895 #> Columns: 5 #> $ Athlete              <chr> \"Montañez Barroso, Elias\", \"Ruiz-Gutierrez, Nosle… #> $ Sport                <chr> \"Cycling\", \"Cycling\", \"Track and Field\", \"Cycling… #> $ `Substance/Reason`   <chr> \"Non-Analytical: Refusal to Submit to Sample Coll… #> $ `Sanction Terms`     <chr> \"4-Year Suspension; Loss of Results\", \"4-Year Sus… #> $ `Sanction Announced` <chr> \"01/10/2023\", \"01/04/2023\", \"12/08/2022\", \"12/05/…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"process-text","dir":"Articles","previous_headings":"","what":"Process text","title":"Scraping USADA sanctions","text":"raw HTML table needs reformatting/restructuring can build visualizations models. ’ll start standardizing names making text lowercase. takes care column names case, invisible characters? (wait, invisible character???). cleaning text, can use process_text() function, adds steps: replaces carriage returns (\\\\r) newlines (\\\\n) white space converts variables text (chr) compare waldo::compare(), can see differences:","code":"usada_sanctions_lc <- janitor::clean_names(usada_sanctions_raw) |>                       purrr::map_df(.f = str_to_lower) glimpse(usada_sanctions_lc) #> Rows: 895 #> Columns: 5 #> $ athlete            <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\"… #> $ sport              <chr> \"cycling\", \"cycling\", \"track and field\", \"cycling\",… #> $ substance_reason   <chr> \"non-analytical: refusal to submit to sample collec… #> $ sanction_terms     <chr> \"4-year suspension; loss of results\", \"4-year suspe… #> $ sanction_announced <chr> \"01/10/2023\", \"01/04/2023\", \"12/08/2022\", \"12/05/20… usada_sanctions_pro <- process_text(usada_sanctions_raw) dplyr::glimpse(usada_sanctions_pro) #> Rows: 895 #> Columns: 5 #> $ athlete            <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\"… #> $ sport              <chr> \"cycling\", \"cycling\", \"track and field\", \"cycling\",… #> $ substance_reason   <chr> \"non-analytical: refusal to submit to sample collec… #> $ sanction_terms     <chr> \"4-year suspension; loss of results\", \"4-year suspe… #> $ sanction_announced <chr> \"01/10/2023\", \"01/04/2023\", \"12/08/2022\", \"12/05/20… waldo::compare(usada_sanctions_lc, usada_sanctions_pro) #> old vs new #>                                                                                                                                    sanction_terms #>   old[559, ] 18-month suspension - loss of results                                                                                                #>   old[560, ] public warning                                                                                                                       #>   old[561, ] 2-year suspension with 1 year reduction - loss of results                                                                            #> - old[562, ] 2-year suspension - loss of results;  #> 2-year suspension restarted - loss of results                                                 #> + new[562, ] 2-year suspension - loss of results;  2-year suspension restarted - loss of results                                                  #>   old[563, ] 18-month suspension - loss of results                                                                                                #>   old[564, ] 2-year suspension - loss of results; sanction tolled                                                                                 #>   old[565, ] 2-year suspension - loss of results                                                                                                  #>  #> old vs new #>                                                                                                                                    sanction_terms #>   old[672, ] 6-month suspension - loss of results                                                                                                 #>   old[673, ] 3-month suspension with 3-month deferral - loss of results                                                                           #>   old[674, ] 2-year suspension - loss of results                                                                                                  #> - old[675, ] 2-year suspension - loss of results  #> suspension extended 103 days                                                                   #> + new[675, ] 2-year suspension - loss of results  suspension extended 103 days                                                                    #>   old[676, ] 3-month suspension with 3-month deferral - loss of results                                                                           #>   old[677, ] 2-year suspension - loss of results                                                                                                  #>   old[678, ] 2-year suspension - loss of results                                                                                                  #>  #> lines(old$sanction_terms[[562]]) vs lines(new$sanction_terms[[562]]) #> - \"2-year suspension - loss of results; \" #> - \"2-year suspension restarted - loss of results\" #> + \"2-year suspension - loss of results;  2-year suspension restarted - loss of results\" #>  #> lines(old$sanction_terms[[675]]) vs lines(new$sanction_terms[[675]]) #> - \"2-year suspension - loss of results \" #> - \"suspension extended 103 days\" #> + \"2-year suspension - loss of results  suspension extended 103 days\""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"exporting-the-raw-data","dir":"Articles","previous_headings":"","what":"Exporting the raw data","title":"Scraping USADA sanctions","text":"’ll export raw data inst/extdata/raw/ folder. ’ve written custom function date-stamping raw data exporting: Verify:","code":"export_extdata(x = usada_sanctions_raw,    inst_path = \"../inst/\", raw = TRUE) #> ℹ Exporting raw data: usada_sanctions_raw #> ✔ Exporting raw data: usada_sanctions_raw ... done #>  #> ✔ Raw data successfully exported! fs::dir_tree(\"../inst/extdata/raw/\") #> ../inst/extdata/raw/ #> ├── 2023-01-20_usada_prohib_assoc_raw.csv #> ├── 2023-01-20_usada_sanctions_raw.csv #> ├── 2023-01-21_usada_prohib_assoc_raw.csv #> ├── 2023-01-21_usada_sanctions_raw.csv #> ├── 2023-01-22_usada_prohib_assoc_raw.csv #> └── 2023-01-22_usada_sanctions_raw.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"export-processed-data","dir":"Articles","previous_headings":"","what":"Export processed data","title":"Scraping USADA sanctions","text":"want export processed data inst/extdata/ folder, can create using export_extdata(raw = FALSE) Verify:","code":"export_extdata(x = usada_sanctions_pro,    inst_path = \"../inst/\", raw = FALSE) #> ℹ Exporting data: usada_sanctions_pro #> ✔ Exporting data: usada_sanctions_pro ... done #>  #> ✔ Data successfully exported! fs::dir_tree(path = '../inst/extdata/', regexp = \"sanctions_pro\") #> ../inst/extdata/ #> └── usada_sanctions_pro.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Single AAF substances","text":"vignette covers classification adverse analytic findings single banned substance USADA sanction table.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"data-versioning","dir":"Articles","previous_headings":"","what":"Data versioning","title":"Single AAF substances","text":"dopingdata uses data tables get updated regularly. keep track versions, ’ve separated raw (_raw) processed (_pro) data inst/ folder: date (YYYY-MM-DD), also helper function getting recent version:","code":"fs::dir_tree(\"../inst/extdata\", recurse = FALSE) #> ../inst/extdata #> ├── raw #> ├── tidy_single_aafs.csv #> ├── tidy_sports.csv #> ├── usada_dates.csv #> ├── usada_prohib_assoc_pro.csv #> ├── usada_sanction_types.csv #> ├── usada_sanctions_pro.csv #> ├── usada_substance_types.csv #> └── wada get_recent(\"../inst/extdata/\", full = TRUE) #> ✔ The last modified datetime in '../inst/extdata/': 2023-01-22 14:53:16 #>                dtstmp  #> \"2023-01-22 14:53:16\" get_recent(\"../inst/extdata/raw\", full = TRUE) #> ✔ The last modified datetime in '../inst/extdata/raw': 2023-01-22 14:37:51 #>                dtstmp  #> \"2023-01-22 14:37:51\""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Single AAF substances","text":"vignette assumes following: Harvest data: copy USADA sanctions table scraped lives inst/extdata/raw/ folder See scrape_usada_sanctions() function scraping-usada.Rmd vignette information data column names formatted janitor::clean_names(), text converted lowercase Fix dates: dates table formatted wrangled See vignettes/sanction-dates.Rmd vignette information Tidy sports: sport column ‘tidied’ athletes/support personnel listed one sport repeated data See vignettes/sports.Rmd vignette information","code":"#> ../inst/extdata/raw/ #> ├── 2023-01-20_usada_sanctions_raw.csv #> ├── 2023-01-21_usada_sanctions_raw.csv #> └── 2023-01-22_usada_sanctions_raw.csv #> ../inst/extdata/ #> └── usada_sanctions_pro.csv #> ../inst/extdata/ #> └── usada_dates.csv #> ../inst/extdata/ #> └── tidy_sports.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"data","dir":"Articles","previous_headings":"Outline","what":"Data","title":"Single AAF substances","text":"’ll import recent version tidy USADA sports data: data names standardized, text converted lowercase.","code":"get_recent_path(\"../inst/extdata/\",    type = \"csv\") ✔ import code pasted to clipboard! ✔ use: readr::read_csv('../inst/extdata/tidy_sports.csv') tidy_usada_sports <- readr::read_csv(   file = '../inst/extdata/tidy_sports.csv') #> Rows: 689 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (4): athlete, sport, substance_reason, sanction_terms #> lgl  (3): support_personnel, multiple_sports, paralympic #> date (1): sanction_date #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dplyr::glimpse(tidy_usada_sports) #> Rows: 689 #> Columns: 8 #> $ athlete           <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\",… #> $ sport             <chr> \"cycling\", \"cycling\", \"track & field\", \"cycling\", \"w… #> $ substance_reason  <chr> \"non-analytical: refusal to submit to sample collect… #> $ sanction_terms    <chr> \"4-year suspension; loss of results\", \"4-year suspen… #> $ sanction_date     <date> 2023-01-10, 2023-01-04, 2022-12-08, 2022-12-05, 202… #> $ support_personnel <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ multiple_sports   <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ paralympic        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"aafs-vs-adrvs","dir":"Articles","previous_headings":"","what":"AAFs vs ADRVs","title":"Single AAF substances","text":"sanctions divided two categories: analytic: Adverse Analytical Finding, AAF; AAF report WADA-accredited laboratory identifies presence prohibited substance /metabolites markers sample. non-analytic: Non-Analytical Anti-doping Rule Violation ADRV; non-analytical anti-doping rule violation stem positive urine blood sample, instead originates , substantiated , evidence doping violations athlete athlete support personnel..","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"substance_reason","dir":"Articles","previous_headings":"AAFs vs ADRVs","what":"substance_reason","title":"Single AAF substances","text":"substance_reason column contains details sanction, can include following information: name banned substance description infraction (non-analytic) use regular expressions identify type substance behind sanction. See examples :","code":"stringr::str_view_all(head(tidy_usada_sports$substance_reason, 25),    \"steroid\", match = TRUE) #> Warning: `str_view()` was deprecated in stringr 1.5.0. #> ℹ Please use `str_view_all()` instead. #> [6] │ androgenic anabolic <steroid> stringr::str_view_all(head(tidy_usada_sports$substance_reason, 10),   \"non-analytical\", match = TRUE) #> [1] │ <non-analytical>: refusal to submit to sample collection #> [8] │ <non-analytical>: refusal to submit to sample collection #> [9] │ <non-analytical>: 3 whereabouts failures; tampering"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"sanction-type","dir":"Articles","previous_headings":"AAFs vs ADRVs","what":"Sanction type","title":"Single AAF substances","text":"non-analytic sanctions include terms non-analytic/non-analytical/etc., prefix substance_reason column. can pass terms regular expressions create sanction_type variable, contain two values: non-analytical analytical ’ll save variable usada_sanction_types dataset.","code":"usada_sanction_types <- dplyr::mutate(.data = tidy_usada_sports,     sanction_type = case_when(       str_detect(string = substance_reason,          \"non-analytical\") ~ \"non-analytical\",       !str_detect(substance_reason,          \"non-analytical\") ~ \"analytical\",       TRUE ~ NA_character_     )    ) usada_sanction_types |>    dplyr::count(sanction_type, sort = TRUE) #> # A tibble: 2 × 2 #>   sanction_type      n #>   <chr>          <int> #> 1 analytical       514 #> 2 non-analytical   175"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"analytic-sanctions","dir":"Articles","previous_headings":"","what":"Analytic sanctions","title":"Single AAF substances","text":"Now can filter usada_sanction_types analytical sanctions sanction_type. number \"analytical\" values sanction_type.","code":"dplyr::filter(usada_sanction_types,          sanction_type == \"analytical\") |> nrow() #> [1] 514"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"non-analytic-sanctions","dir":"Articles","previous_headings":"","what":"Non-analytic sanctions","title":"Single AAF substances","text":"","code":"dplyr::filter(usada_sanction_types,    sanction_type == \"non-analytical\") |>    nrow() #> [1] 175"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"single-vs--multiple-substances","dir":"Articles","previous_headings":"","what":"Single vs. multiple substances","title":"Single AAF substances","text":"can identify single vs. multiple substances? Let’s take look four different sanctions sanction_type_example: can see two analytic two non-analytic sanctions, one single multiple substance/reason. Fortunately, sanctions multiple items separated either semicolons (;), commas (,), conjunction (), can use regular expression separate items. multiple_sr identifier can used separate sanctions multiple substance/reasons sanctions single substance reason.","code":"#> # A tibble: 4 × 3 #>   sport         substance_reason                                         sanct…¹ #>   <chr>         <chr>                                                    <chr>   #> 1 swimming      non-analytical: 3 whereabouts failures                   non-an… #> 2 track & field cannabinoids                                             analyt… #> 3 triathlon     androgenic anabolic steroid; cannabinoids; anastrozole;… analyt… #> 4 track & field non-analytical: tampering, administration (iv), and tra… non-an… #> # … with abbreviated variable name ¹​sanction_type dplyr::mutate(sanction_type_example,    multiple_sr = case_when(     # identify the multiple_sr substances using a regular expression     stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~ TRUE,     # negate the regular expression for the single substances     !stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~FALSE,     TRUE ~ NA)) |>    janitor::tabyl(multiple_sr, sanction_type) #>  multiple_sr analytical non-analytical #>        FALSE          1              1 #>         TRUE          1              1"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"multiple-analytic-substances","dir":"Articles","previous_headings":"Single vs. multiple substances","what":"Multiple analytic substances","title":"Single AAF substances","text":"new multiple_sr indicator, can separate usada_substance_types single multiple analytic substances. many different combinations multiple substances ? ‘count counts’, tells multiple substance combinations occur .","code":"usada_substance_types <- usada_sanction_types |>    dplyr::mutate(multiple_sr = case_when(     # identify the multiple_sr substances using a regular expression     stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~ TRUE,     # negate the regular expression for the single substances     !stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~FALSE,     TRUE ~ NA))  usada_substance_types |>    dplyr::count(multiple_sr, sort = TRUE) #> # A tibble: 2 × 2 #>   multiple_sr     n #>   <lgl>       <int> #> 1 FALSE         508 #> 2 TRUE          181 usada_substance_types |>    dplyr::filter(multiple_sr == TRUE) |>    dplyr::count(substance_reason, sort = TRUE, name = \"Count\") |>    count(Count, sort = TRUE) #> # A tibble: 5 × 2 #>   Count     n #>   <int> <int> #> 1     1   128 #> 2     2    10 #> 3     3     5 #> 4     4     3 #> 5     6     1"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"single-analytic-substances","dir":"Articles","previous_headings":"","what":"Single analytic substances","title":"Single AAF substances","text":"vignette going focus sanctions single substance listed (deal multiple substances next). count single analytic substances occurring 5 times data:","code":"single_analytic_subs <- usada_substance_types |>    dplyr::filter(multiple_sr == FALSE) single_analytic_subs |>    janitor::tabyl(substance_reason) |>    janitor::adorn_pct_formatting() |>    dplyr::arrange(desc(n)) |>    dplyr::filter(n > 5) #>                                        substance_reason  n percent #>                             androgenic anabolic steroid 54   10.6% #>                                            cannabinoids 41    8.1% #>  non-analytical: refusal to submit to sample collection 39    7.7% #>                                                ostarine 38    7.5% #>                  non-analytical: 3 whereabouts failures 24    4.7% #>                                       methylhexaneamine 20    3.9% #>                                              clomiphene 17    3.3% #>                                              stanozolol 11    2.2% #>                                              furosemide 10    2.0% #>                                          non-analytical  9    1.8% #>                                          spironolactone  8    1.6% #>                           1,3-dimethylbutylamine (dmba)  7    1.4% #>                                    erythropoietin (epo)  7    1.4% #>                                            testosterone  7    1.4% #>                                             amphetamine  6    1.2% #>                                               canrenone  6    1.2% #>                           dehydroepiandrosterone (dhea)  6    1.2% #>                               dimethylbutylamine (dmba)  6    1.2% #>                                                  gw1516  6    1.2% #>                                              higenamine  6    1.2% #>                                non-analytical: use (iv)  6    1.2%"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"classifying-substances","dir":"Articles","previous_headings":"","what":"Classifying substances","title":"Single AAF substances","text":"identify WADA banned substances, ’ve written classify_wada_substances(), function scans substance_reason column identifies substances found WADA list. See Appendix (bottom) information.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"how-it-works-s1-anabolic-agents-example","dir":"Articles","previous_headings":"Classifying substances","what":"How it works (S1 ANABOLIC AGENTS example)","title":"Single AAF substances","text":"dopingdata stores vectors substance group WADA list (S1 substances ): vectors also stored regular expressions, can use match substance_reason column : classify_wada_substances() creates substance_group variable WADA classifications (stored dopingdata::wada_classes)","code":"head(dopingdata::s1_substances, 10) #>  [1] \"androgenic anabolic steroid\"                     #>  [2] \"androgenic anabolic steroids\"                    #>  [3] \"anabolic agent\"                                  #>  [4] \"anabolic agents\"                                 #>  [5] \"anabolic steroid\"                                #>  [6] \"anabolic steroids\"                               #>  [7] \"androstenedione\"                                 #>  [8] \"metabolites of androstenedione\"                  #>  [9] \"1-androstenediol (5α-androst-1-ene-3β,17β-diol)\" #> [10] \"1-androstenedione\" stringr::str_view_all(string = single_analytic_subs$substance_reason,    pattern = s1_regex, match = TRUE) #>  [3] │ <androgenic anabolic steroid> #>  [8] │ <dehydroepiandrosterone> (<dhea>) #> [10] │ <ostarine> #> [13] │ <anabolic agent> #> [14] │ <dehydroepiandrosterone> (<dhea>) #> [23] │ <dehydroepiandrosterone> (<dhea>) #> [25] │ <androgenic anabolic steroid> #> [27] │ <stanozolol> #> [31] │ <ostarine> #> [39] │ <androgenic anabolic steroid> #> [41] │ <dehydroepiandrosterone> (<dhea>) #> [42] │ <androgenic anabolic steroid> #> [43] │ <androgenic anabolic steroid> #> [45] │ <androgenic anabolic steroid> #> [48] │ <ostarine> #> [49] │ <androgenic anabolic steroid> #> [50] │ <stanozolol> #> [53] │ <dehydrochloromethyltestosterone> (<dhcmt>) #> [54] │ <stanozolol> #> [59] │ <testosterone> #> ... and 147 more dopingdata::wada_classes #> # A tibble: 13 × 1 #>    Classification                        #>    <chr>                                 #>  1 S1 ANABOLIC AGENTS                    #>  2 S2 PEP HORMONES/G FACTORS/MIMETICS    #>  3 S3 BETA-2 AGONISTS                    #>  4 S4 HORMONE AND METABOLIC MODULATORS   #>  5 S5 DIURETICS/MASKING AGENTS           #>  6 S6 STIMULANTS                         #>  7 S7 NARCOTICS                          #>  8 S8 CANNABINOIDS                       #>  9 S9 GLUCOCORTICOIDS                    #> 10 M1 MANIPULATION OF BLOOD              #> 11 M2 CHEMICAL AND PHYSICAL MANIPULATION #> 12 M3 GENE AND CELL DOPING               #> 13 P1 BETA-BLOCKERS"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"tidy_single_aafs","dir":"Articles","previous_headings":"Classifying substances","what":"tidy_single_aafs","title":"Single AAF substances","text":"output classify_wada_substances() stored tidy_single_aafs substance_group’s appear ?","code":"tidy_single_aafs <- classify_wada_substances(   usada_data = single_analytic_subs,    subs_column = substance_reason) tidy_single_aafs |>    janitor::tabyl(substance_group) |>    janitor::adorn_pct_formatting() |>    dplyr::arrange(desc(n))  #>                      substance_group   n percent valid_percent #>                   S1 ANABOLIC AGENTS 167   32.9%         40.8% #>                                 <NA>  99   19.5%             - #>                        S6 STIMULANTS  73   14.4%         17.8% #>                      S8 CANNABINOIDS  41    8.1%         10.0% #>  S4 HORMONE AND METABOLIC MODULATORS  38    7.5%          9.3% #>          S5 DIURETICS/MASKING AGENTS  37    7.3%          9.0% #>   S2 PEP HORMONES/G FACTORS/MIMETICS  21    4.1%          5.1% #>                   S3 BETA-2 AGONISTS  15    3.0%          3.7% #>                   S9 GLUCOCORTICOIDS   6    1.2%          1.5% #>             M1 MANIPULATION OF BLOOD   5    1.0%          1.2% #>                         S7 NARCOTICS   5    1.0%          1.2% #>                     P1 BETA-BLOCKERS   1    0.2%          0.2%"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"unclassified-substances","dir":"Articles","previous_headings":"","what":"Unclassified substances","title":"Single AAF substances","text":"substances classified using standard WADA list stored unclass_single_aaf_substances. can use additional regular expressions classify_substance() function.","code":"unclass_single_aaf_substances <- tidy_single_aafs |>    filter(is.na(substance_group))  unclass_single_aaf_substances |>    count(substance_reason, sort = TRUE) #> # A tibble: 18 × 2 #>    substance_reason                                            n #>    <chr>                                                   <int> #>  1 non-analytical: refusal to submit to sample collection     39 #>  2 non-analytical: 3 whereabouts failures                     24 #>  3 non-analytical                                              9 #>  4 non-analytical: use (iv)                                    6 #>  5 non-analytical: failure to appear to sample collection      3 #>  6 non-analytical: possession (peptides)                       3 #>  7 non-analytical positive                                     2 #>  8 non-analytical: complicity                                  2 #>  9 non-analytical: use                                         2 #> 10 3 whereabouts failures                                      1 #> 11 elevated t/e                                                1 #> 12 non-analytical: distributing                                1 #> 13 non-analytical: evading sample collection                   1 #> 14 non-analytical: intravenous infusion                        1 #> 15 non-analytical: refusal to submit to sample: collection     1 #> 16 non-analytical: use (igf-1)                                 1 #> 17 non-analytical: use (intravenous infusion)                  1 #> 18 non-analytical:: use (peptides)                             1"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"elevated-te-3-whereabouts-failures","dir":"Articles","previous_headings":"Unclassified substances","what":"\"elevated t/e\" & 3 whereabouts failures","title":"Single AAF substances","text":"can use recode original values–start 3 whereabouts failures yair rodriguez non-analytical, can create tiny tibble bind back usada_substance_types (removing rodriguez, yair) Now can address elevated t/e (classify \"S1 ANABOLIC AGENTS\")","code":"classify_substance(   df = unclass_single_aaf_substances,    subs_col = substance_reason,    subs = \"elevated t/e\",    var = \"analytic\",   val = \"S1 ANABOLIC AGENTS\",   wb = FALSE) |>    classify_substance(   subs_col = substance_reason,    subs = \"3 whereabouts failures\",    var = \"non_analytic\",   val = \"3 whereabouts failures\",   wb = FALSE) |>    dplyr::filter(!is.na(analytic) | !is.na(non_analytic)) |>    dplyr::select(athlete, sanction_date, substance_reason, analytic, non_analytic) #> # A tibble: 26 × 5 #>    athlete           sanction_date substance_reason              analy…¹ non_a…² #>    <chr>             <date>        <chr>                         <chr>   <chr>   #>  1 gormley, isabel   2022-04-19    non-analytical: 3 whereabout… NA      3 wher… #>  2 rodriguez, yair   2020-12-03    3 whereabouts failures        NA      3 wher… #>  3 bey, kamal        2020-10-30    non-analytical: 3 whereabout… NA      3 wher… #>  4 diaz, nick        2018-04-09    non-analytical: 3 whereabout… NA      3 wher… #>  5 goodwin, marquise 2017-08-15    non-analytical: 3 whereabout… NA      3 wher… #>  6 rollins, brianna  2017-04-20    non-analytical: 3 whereabout… NA      3 wher… #>  7 bough, gino       2016-07-25    non-analytical: 3 whereabout… NA      3 wher… #>  8 field, emily      2015-06-08    non-analytical: 3 whereabout… NA      3 wher… #>  9 north, jonathan   2015-01-22    non-analytical: 3 whereabout… NA      3 wher… #> 10 erickson, sarah   2014-10-13    non-analytical: 3 whereabout… NA      3 wher… #> 11 ives, kevin       2014-07-08    non-analytical: 3 whereabout… NA      3 wher… #> 12 hicks, jeremy     2014-06-20    non-analytical: 3 whereabout… NA      3 wher… #> 13 dixon, reginald   2014-06-06    non-analytical: 3 whereabout… NA      3 wher… #> 14 koon, paul        2014-04-28    non-analytical: 3 whereabout… NA      3 wher… #> 15 davis, walter     2014-04-21    non-analytical: 3 whereabout… NA      3 wher… #> 16 crawford, shawn   2013-04-18    non-analytical: 3 whereabout… NA      3 wher… #> 17 lock, jane        2012-04-20    non-analytical: 3 whereabout… NA      3 wher… #> 18 kochem, matt      2012-04-13    non-analytical: 3 whereabout… NA      3 wher… #> 19 thompson, lenroy  2012-02-26    non-analytical: 3 whereabout… NA      3 wher… #> 20 arias, luis       2012-02-24    non-analytical: 3 whereabout… NA      3 wher… #> 21 goff, tyler       2010-09-13    non-analytical: 3 whereabout… NA      3 wher… #> 22 jelks, mark       2010-08-30    non-analytical: 3 whereabout… NA      3 wher… #> 23 barnette, brandon 2010-08-25    non-analytical: 3 whereabout… NA      3 wher… #> 24 o'bee, kirk       2002-07-18    elevated t/e                  S1 ANA… NA      #> 25 ives, kevin       2014-07-08    non-analytical: 3 whereabout… NA      3 wher… #> # … with 1 more row, and abbreviated variable names ¹​analytic, ²​non_analytic # get rodriguez, yair (3 whereabouts failures) miss_classified_sanction_type <- tidy_single_aafs |>    filter(athlete == \"rodriguez, yair\" &              sanction_date == lubridate::as_date(\"2020-12-03\")) |>    dplyr::mutate(sanction_type = if_else(sanction_type == \"analytical\",      true = \"non-analytical\", sanction_type)) |>    dplyr::select(-substance_group) usada_substance_types <- usada_substance_types |>    dplyr::filter(athlete != \"rodriguez, yair\" &              sanction_date != lubridate::as_date(\"2020-12-03\")) |>    dplyr::bind_rows(miss_classified_sanction_type) usada_substance_types |>    dplyr::filter(athlete == \"rodriguez, yair\") |>    dplyr::select(athlete, sanction_date, substance_reason, sanction_type) #> # A tibble: 1 × 4 #>   athlete         sanction_date substance_reason       sanction_type  #>   <chr>           <date>        <chr>                  <chr>          #> 1 rodriguez, yair 2020-12-03    3 whereabouts failures non-analytical tidy_single_aafs <- tidy_single_aafs |>    dplyr::mutate(     substance_group = case_when(       stringr::str_detect(substance_reason, \"elevated t/e\") ~ \"S1 ANABOLIC AGENTS\"))   tidy_single_aafs |>    dplyr::filter(str_detect(athlete, \"kirk\")) |>    dplyr::select(athlete, sanction_date, substance_reason, sanction_type) #> # A tibble: 2 × 4 #>   athlete     sanction_date substance_reason     sanction_type #>   <chr>       <date>        <chr>                <chr>         #> 1 o'bee, kirk 2010-10-06    erythropoietin (epo) analytical    #> 2 o'bee, kirk 2002-07-18    elevated t/e         analytical"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"export-sanction-types","dir":"Articles","previous_headings":"","what":"Export sanction types","title":"Single AAF substances","text":"Export analytic sanctions (usada_sanction_types):","code":"export_extdata(   x = usada_sanction_types,    inst_path = \"../inst/\",    raw = FALSE ) #> ℹ Exporting data: usada_sanction_types #> ✔ Exporting data: usada_sanction_types ... done #>  #> ✔ Data successfully exported! fs::dir_tree('../inst/extdata/', regexp = \"types\") #> ../inst/extdata/ #> ├── usada_sanction_types.csv #> └── usada_substance_types.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"export-substance-types","dir":"Articles","previous_headings":"","what":"Export substance types","title":"Single AAF substances","text":"Export usada_substance_types","code":"export_extdata(   x = usada_substance_types,    inst_path = \"../inst/\",    raw = FALSE ) #> ℹ Exporting data: usada_substance_types #> ✔ Exporting data: usada_substance_types ... done #>  #> ✔ Data successfully exported! fs::dir_tree('../inst/extdata/', regexp = \"usada_substance_types\") #> ../inst/extdata/ #> └── usada_substance_types.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"export-tidy-classified-single-substances","dir":"Articles","previous_headings":"","what":"Export tidy classified (single) substances","title":"Single AAF substances","text":"Export classified single substances (tidy_single_aafs):","code":"export_extdata(   x = tidy_single_aafs,    inst_path = \"../inst/\",    raw = FALSE ) #> ℹ Exporting data: tidy_single_aafs #> ✔ Exporting data: tidy_single_aafs ... done #>  #> ✔ Data successfully exported! fs::dir_tree(\"../inst/extdata/\", regexp = \"tidy_single_aafs\") #> ../inst/extdata/ #> └── tidy_single_aafs.csv"},{"path":[]},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-aaf-substances.html","id":"wada-list","dir":"Articles","previous_headings":"Appendix","what":"WADA list","title":"Single AAF substances","text":"copy original WADA substances available dopingdata::WADA counts substances per group dopingdata::WADA","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-adrv-sanctions.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Single ADRV sanctions","text":"vignette covers non-analytic, single substance violations USADA sanction table.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-adrv-sanctions.html","id":"data-versioning","dir":"Articles","previous_headings":"","what":"Data versioning","title":"Single ADRV sanctions","text":"dopingdata uses data tables get updated regularly. keep track versions, ’ve separated raw (_raw) processed (_pro) data inst/ folder: also helper function getting recent version:","code":"fs::dir_tree(\"../inst/extdata\", recurse = FALSE) #> ../inst/extdata #> ├── raw #> ├── tidy_single_aafs.csv #> ├── tidy_sports.csv #> ├── usada_dates.csv #> ├── usada_prohib_assoc_pro.csv #> ├── usada_sanction_types.csv #> ├── usada_sanctions_pro.csv #> ├── usada_substance_types.csv #> └── wada get_recent(\"../inst/extdata/\", full = TRUE) #> ✔ The last modified datetime in '../inst/extdata/': 2023-01-22 14:53:16 #>                dtstmp  #> \"2023-01-22 14:53:16\" get_recent(\"../inst/extdata/raw\", full = TRUE) #> ✔ The last modified datetime in '../inst/extdata/raw': 2023-01-22 14:37:51 #>                dtstmp  #> \"2023-01-22 14:37:51\""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-adrv-sanctions.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Single ADRV sanctions","text":"’ll import recent version tidy USADA sports data: data names standardized, text converted lowercase.","code":"get_recent_path(\"../inst/extdata/\",    type = \"csv\") ✔ import code pasted to clipboard! ✔ use: readr::read_csv('../inst/extdata/tidy_sports.csv') tidy_usada_sports <- readr::read_csv(   file = '../inst/extdata/tidy_sports.csv') #> Rows: 689 Columns: 8 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr  (4): athlete, sport, substance_reason, sanction_terms #> lgl  (3): support_personnel, multiple_sports, paralympic #> date (1): sanction_date #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. dplyr::glimpse(tidy_usada_sports) #> Rows: 689 #> Columns: 8 #> $ athlete           <chr> \"montañez barroso, elias\", \"ruiz-gutierrez, noslen\",… #> $ sport             <chr> \"cycling\", \"cycling\", \"track & field\", \"cycling\", \"w… #> $ substance_reason  <chr> \"non-analytical: refusal to submit to sample collect… #> $ sanction_terms    <chr> \"4-year suspension; loss of results\", \"4-year suspen… #> $ sanction_date     <date> 2023-01-10, 2023-01-04, 2022-12-08, 2022-12-05, 202… #> $ support_personnel <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ multiple_sports   <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ paralympic        <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/single-adrv-sanctions.html","id":"aafs-vs-adrvs","dir":"Articles","previous_headings":"","what":"AAFs vs ADRVs","title":"Single ADRV sanctions","text":"sanctions divided two categories: analytic: Adverse Analytical Finding, AAF; AAF report WADA-accredited laboratory identifies presence prohibited substance /metabolites markers sample. non-analytic: Non-Analytical Anti-doping Rule Violation ADRV; non-analytical anti-doping rule violation stem positive urine blood sample, instead originates , substantiated , evidence doping violations athlete athlete support personnel..","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Frigaard. Maintainer, author.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frigaard M (2023). dopingdata: USADA doping data. R package version 0.0.0.9000, https://mjfrigaard.github.io/dopingdata/.","code":"@Manual{,   title = {dopingdata: USADA doping data},   author = {Martin Frigaard},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://mjfrigaard.github.io/dopingdata/}, }"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"dopingdata","dir":"","previous_headings":"","what":"USADA doping data ","title":"USADA doping data ","text":"dopingdata contains data United States Anti-Doping Agency exploration, modeling, visualizations. datasets package derived USADA website World Anti-Doping Agency (WADA) banned substances list.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"USADA doping data ","text":"can install development version dopingdata like :","code":"# install.packages(\"devtools\") devtools::install_github(\"mjfrigaard/dopingdata\")"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"raw-data","dir":"","previous_headings":"","what":"Raw Data","title":"USADA doping data ","text":"dataset harvested using rvest xml2 packages, using manners (polite package). See scraping-usada-sanctions.Rmd scraping-usada-proh-assoc.Rmd vignettes information raw data saved inst/extdata/raw folder","code":"#> inst/extdata/raw #> ├── 2023-01-20_usada_prohib_assoc_raw.csv #> ├── 2023-01-20_usada_sanctions_raw.csv #> ├── 2023-01-21_usada_prohib_assoc_raw.csv #> └── 2023-01-21_usada_sanctions_raw.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"processed-data","dir":"","previous_headings":"","what":"Processed Data","title":"USADA doping data ","text":"Processed datasets dimensions structure _raw data, ’ve formatted easier wrangling/manipulation processed datasets _pro suffix Processed data column names formatted janitor::clean_names() text converted lowercase See scraping-usada-sanctions.Rmd scraping-usada-proh-assoc.Rmd vignettes information Processed datasets inst/extdata/ folder:","code":"#> inst/extdata/ #> ├── usada_prohib_assoc_pro.csv #> └── usada_sanctions_pro.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"derived-data","dir":"","previous_headings":"","what":"Derived Data","title":"USADA doping data ","text":"Additional datasets derived processed data live inst/extdata/ folder (date prefix suffixes).","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"sanction-dates","dir":"","previous_headings":"Derived Data","what":"Sanction Dates","title":"USADA doping data ","text":"sanction_announced initially includes two dates (original, updated) selection athletes. observations wrangled formatted dates. Derived usada_sanctions_pro.csv data. See vignettes/sanction-dates.Rmd vignette information:","code":"#> inst/extdata/ #> └── usada_dates.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"sports","dir":"","previous_headings":"Derived Data","what":"Sports","title":"USADA doping data ","text":"sport column ‘tidied’ athletes/support personnel listed one sport repeated data. data derived usada_dates.csv data. sports separated ‘tidied’ vignettes/sanction-sports.Rmd:","code":"#> inst/extdata/ #> └── tidy_sports.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"adverse-analytical-findings-aaf","dir":"","previous_headings":"Derived Data","what":"Adverse Analytical Findings (AAF)","title":"USADA doping data ","text":"Single Substance Violations (.e., Adverse Analytical Finding, AAF) derived tidy_sports.csv: Adverse analytical finding (AAF) sanctions single substance vignettes/single-aaf-substances.Rmd: Multiple Substance Violations (.e., Adverse Analytical Finding, AAF) derived Adverse analytical finding (AAF) sanctions multiple substance vignettes/multiple-aaf-substances.Rmd:","code":"#> inst/extdata/ #> └── tidy_single_aafs.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"non-analytical-anti-doping-rule-violation-adrv","dir":"","previous_headings":"Derived Data","what":"Non-Analytical Anti-doping Rule Violation (ADRV)","title":"USADA doping data ","text":"Single Substance, Non-Analytic Violations (.e., Non-Analytical Anti-doping Rule Violation, ADRV) derived Multiple Substance, Non-Analytic Violations (.e., Non-Analytical Anti-doping Rule Violation, ADRV) derived ","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"sanction-terms","dir":"","previous_headings":"Derived Data","what":"Sanction terms","title":"USADA doping data ","text":"type length suspension derived ","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"prohibited-associations","dir":"","previous_headings":"Derived Data","what":"Prohibited Associations","title":"USADA doping data ","text":"prohibited associations derived usada_prohib_assoc_pro.csv data.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"wada-data","dir":"","previous_headings":"","what":"WADA data","title":"USADA doping data ","text":"package also includes list World Anti-Doping Agency (WADA) banned substances (published online ).","code":"#> inst/extdata/wada/ #> ├── wada-2019-english-prohibited-list.xlsx #> └── wada_2019_english_prohibited_list.pdf"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"more-wada-resources-on-banned-substances","dir":"","previous_headings":"WADA data","what":"More WADA Resources on banned substances","title":"USADA doping data ","text":"USADA - UFC","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/check_rtxt.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for checking robots.txt file — check_rtxt","title":"Function for checking robots.txt file — check_rtxt","text":"Function checking robots.txt file","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/check_rtxt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for checking robots.txt file — check_rtxt","text":"","code":"check_rtxt(url, delay, user_agent, force, verbose)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/check_rtxt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for checking robots.txt file — check_rtxt","text":"url web address download delay default delay user_agent user agent string force force re-downloading robots.xtx verbose logical","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_substance.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify a specific WADA substance — classify_substance","title":"Classify a specific WADA substance — classify_substance","text":"Classify specific WADA substance","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_substance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify a specific WADA substance — classify_substance","text":"","code":"classify_substance(df, subs_col, subs, var, val = \"match\", wb = TRUE)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_substance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify a specific WADA substance — classify_substance","text":"df data USADA website subs_col column substances/reasons sanctions subs character string banned WADA substances var name new variable val variable value matched wb include word boundary","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_substance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify a specific WADA substance — classify_substance","text":"substance dataset newly classified substances","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify banned WADA substances — classify_wada_substances","title":"Classify banned WADA substances — classify_wada_substances","text":"usada_data table sanctions United     States Anti-Doping Agency: https://www.usada.org/news/sanctions.     substance_reason column contains justification sanction. cases, multiple substances/reasons,     identified first.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify banned WADA substances — classify_wada_substances","text":"","code":"classify_wada_substances(usada_data, subs_column)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify banned WADA substances — classify_wada_substances","text":"usada_data scraped data USADA website subs_column column substances/reasons sanctions","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify banned WADA substances — classify_wada_substances","text":"substances dataset newly classified substances","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify banned WADA substances — classify_wada_substances","text":"","code":"usada_data <- readr::read_csv(   \"inst/extdata/raw/2023-01-13/2023-01-13-usada_data_raw.csv\" ) #> Registered S3 methods overwritten by 'readr': #>   method                    from  #>   as.data.frame.spec_tbl_df vroom #>   as_tibble.spec_tbl_df     vroom #>   format.col_spec           vroom #>   print.col_spec            vroom #>   print.collector           vroom #>   print.date_names          vroom #>   print.locale              vroom #>   str.col_spec              vroom #> Error: 'inst/extdata/raw/2023-01-13/2023-01-13-usada_data_raw.csv' does not exist in current working directory ('/home/runner/work/dopingdata/dopingdata/docs/reference'). classify_wada_substances(   usada_data = usada_data,   subs_column = substance_reason ) #> Error in dplyr::mutate(.data = usada_data, substance_group = case_when(stringr::str_detect({    {        subs_column    }}, s1_regex) ~ \"S1 ANABOLIC AGENTS\", stringr::str_detect({    {        subs_column    }}, s2_regex) ~ \"S2 PEP HORMONES/G FACTORS/MIMETICS\", stringr::str_detect({    {        subs_column    }}, s3_regex) ~ \"S3 BETA-2 AGONISTS\", stringr::str_detect({    {        subs_column    }}, s4_regex) ~ \"S4 HORMONE AND METABOLIC MODULATORS\", stringr::str_detect({    {        subs_column    }}, s5_regex) ~ \"S5 DIURETICS/MASKING AGENTS\", stringr::str_detect({    {        subs_column    }}, m1_regex) ~ \"M1 MANIPULATION OF BLOOD\", stringr::str_detect({    {        subs_column    }}, m2_regex) ~ \"M2 CHEMICAL AND PHYSICAL MANIPULATION\", stringr::str_detect({    {        subs_column    }}, m3_regex) ~ \"M3 GENE AND CELL DOPING\", stringr::str_detect({    {        subs_column    }}, s6_regex) ~ \"S6 STIMULANTS\", stringr::str_detect({    {        subs_column    }}, s7_regex) ~ \"S7 NARCOTICS\", stringr::str_detect({    {        subs_column    }}, s8_regex) ~ \"S8 CANNABINOIDS\", stringr::str_detect({    {        subs_column    }}, s9_regex) ~ \"S9 GLUCOCORTICOIDS\", stringr::str_detect({    {        subs_column    }}, p1_regex) ~ \"P1 BETA-BLOCKERS\", TRUE ~ NA_character_)): object 'usada_data' not found"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_regex_wb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regular expression with word boundaries — create_regex_wb","title":"Create a regular expression with word boundaries — create_regex_wb","text":"Create regular expression word boundaries","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_regex_wb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regular expression with word boundaries — create_regex_wb","text":"","code":"create_regex_wb(string)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_regex_wb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regular expression with word boundaries — create_regex_wb","text":"string character vector items","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_regex_wb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regular expression with word boundaries — create_regex_wb","text":"wb_regex regular expression","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_regex_wb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a regular expression with word boundaries — create_regex_wb","text":"","code":"require(stringr) #> Loading required package: stringr wb_regex <- create_regex_wb(c(\"pink\", \"salmon.\")) str_view_all(stringr::sentences, wb_regex, match = TRUE) #> Warning: `str_view()` was deprecated in stringr 1.5.0. #> ℹ Please use `str_view_all()` instead. #>  [12] │ A rod is used to catch <pink> <salmon>. #> [714] │ A <pink> shell was found on the sandy beach."},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert date/time stamp — dtstamp","title":"Insert date/time stamp — dtstamp","text":"Insert date/time stamp","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert date/time stamp — dtstamp","text":"","code":"dtstamp(include_time = FALSE, side = \"none\")"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert date/time stamp — dtstamp","text":"include_time logical, include time? side include underscore (_) 'left' 'right' side (default 'none')","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert date/time stamp — dtstamp","text":"polished date (date time) stamp","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert date/time stamp — dtstamp","text":"","code":"dtstamp(FALSE) #> [1] \"2023-01-22\" dtstamp() #> [1] \"2023-01-22\""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to inst/extdata/ — export_extdata","title":"Export data to inst/extdata/ — export_extdata","text":"Export data inst/extdata/","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to inst/extdata/ — export_extdata","text":"","code":"export_extdata(x, inst_path, raw = TRUE)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to inst/extdata/ — export_extdata","text":"x data export inst_path path 'inst/' folder ('inst/' folder!) raw logical, raw dataset?","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to inst/extdata/ — export_extdata","text":"exported data","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export data to inst/extdata/ — export_extdata","text":"","code":"df <- tibble::tibble(x = 1:3,                      y = c(\"a\", \"b\", \"c\"),                      z = c(TRUE, FALSE, NA)) export_extdata(x = df, inst_path = \"inst/\", raw = TRUE) #> Error in export_extdata(x = df, inst_path = \"inst/\", raw = TRUE): ! Can't locate the 'inst/' folder! export_extdata(x = df, inst_path = \"inst/\", raw = FALSE) #> Error in export_extdata(x = df, inst_path = \"inst/\", raw = FALSE): ! Can't locate the 'inst/' folder!"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the most recent modification date — get_recent","title":"Return the most recent modification date — get_recent","text":"Return recent modification date","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the most recent modification date — get_recent","text":"","code":"get_recent(pth = \".\", full = FALSE)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the most recent modification date — get_recent","text":"pth path file folder full return datetime (instead date)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the most recent modification date — get_recent","text":"vrsn character vector date datetime","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the most recent modification date — get_recent","text":"","code":"get_recent(\"wrong\") #> Error in get_recent(\"wrong\"): Sorry--this is not a valid file path get_recent(\"inst/extdata/\") #> Error in get_recent(\"inst/extdata/\"): Sorry--this is not a valid file path get_recent(\"inst/extdata/raw\", full = TRUE) #> Error in get_recent(\"inst/extdata/raw\", full = TRUE): Sorry--this is not a valid file path"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Return current data in folder — get_recent_path","title":"Return current data in folder — get_recent_path","text":"Return current data folder","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return current data in folder — get_recent_path","text":"","code":"get_recent_path(folder, type)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return current data in folder — get_recent_path","text":"folder directory data files type file extension","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return current data in folder — get_recent_path","text":"path recent data file","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return current data in folder — get_recent_path","text":"","code":"# not run get_recent_path(folder = \"inst/extdata/\", type = \"txt\") #> ! folder does not exist! #> Error in nrow(top_tbl): object 'top_tbl' not found get_recent_path(folder = \"inst/extdata/\", type = \"csv\") #> ! folder does not exist! #> Error in nrow(top_tbl): object 'top_tbl' not found get_recent_path(folder = \"inst/extdata/\", type = \"tsv\") #> ! folder does not exist! #> Error in nrow(top_tbl): object 'top_tbl' not found"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/guess_basename.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess filename for download from url — guess_basename","title":"Guess filename for download from url — guess_basename","text":"Guess filename download url","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/guess_basename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess filename for download from url — guess_basename","text":"","code":"guess_basename(x)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/guess_basename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess filename for download from url — guess_basename","text":"x url guess filename ","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":null,"dir":"Reference","previous_headings":"","what":"Not in (not-in operator for R.) — %nin%","title":"Not in (not-in operator for R.) — %nin%","text":"(-operator R.)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in (not-in operator for R.) — %nin%","text":"","code":"x %nin% y"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in (not-in operator for R.) — %nin%","text":"x vector NULL: values matched. y vector NULL: values matched .","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not in (not-in operator for R.) — %nin%","text":"negation %%.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not in (not-in operator for R.) — %nin%","text":"","code":"1 %nin% 2:10 #> [1] TRUE c(\"a\", \"b\") %nin% c(\"a\", \"c\", \"d\") #> [1] FALSE  TRUE"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/otherwise.html","id":null,"dir":"Reference","previous_headings":"","what":"null-coalescing operator. See purrr for details. — %otherwise%","title":"null-coalescing operator. See purrr for details. — %otherwise%","text":"null-coalescing operator. See purrr details.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/otherwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"null-coalescing operator. See purrr for details. — %otherwise%","text":"","code":"lhs %otherwise% rhs"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/otherwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"null-coalescing operator. See purrr for details. — %otherwise%","text":"lhs left hand side rhs right hand side","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Polite download — polite_download_file","title":"Polite download — polite_download_file","text":"Polite download","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polite download — polite_download_file","text":"","code":"polite_download_file(   url,   destfile = guess_basename(url),   ...,   quiet = !verbose,   mode = \"wb\",   path = \"downloads/\",   user_agent = paste0(\"polite \", getOption(\"HTTPUserAgent\")),   delay = 5,   force = FALSE,   overwrite = FALSE,   verbose = FALSE )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polite download — polite_download_file","text":"url web address file downloaded destfile name destination file ... additional arguments passed `download.file` quiet default value inverse  `verbose` mode download mode. Default value \"wb\" path path save. Default path `downloads/` user_agent default value `paste0(\"polite \", getOption(\"HTTPUserAgent\"))` delay default value equal 5 force force re-download robots.txt overwrite overwrite downloaded file. Default value FALSE verbose default value FALSE","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_fetch_rtxt.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","title":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","text":"Function get robots.txt structured form. Memoised","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_fetch_rtxt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","text":"","code":"polite_fetch_rtxt(..., user_agent, delay, verbose)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_fetch_rtxt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","text":"... arguments passed `robotstxt::robotstxt()` user_agent user agent string delay default delay verbose logical","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_read_html.html","id":null,"dir":"Reference","previous_headings":"","what":"function that actually fetches response from the web — polite_read_html","title":"function that actually fetches response from the web — polite_read_html","text":"function actually fetches response web","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_read_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function that actually fetches response from the web — polite_read_html","text":"","code":"polite_read_html(   url,   ...,   delay = 5,   user_agent = paste0(\"polite \", getOption(\"HTTPUserAgent\"), \"bot\"),   force = FALSE,   verbose = FALSE )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_read_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function that actually fetches response from the web — polite_read_html","text":"url web address scraping ... arguments passed `httr::GET()` delay scraping delay. Default 5 sec user_agent user agent string. Default value `paste0(\"polite \", getOption(\"HTTPUserAgent\"), \"bot\")` force force re-download robots.txt verbose default FALSE","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Process raw data — process_text","title":"Process raw data — process_text","text":"Process raw data","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process raw data — process_text","text":"","code":"process_text(raw_data)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process raw data — process_text","text":"raw_data","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process raw data — process_text","text":"tibble standardized names, lowercase text, character!","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process raw data — process_text","text":"","code":"require(palmerpenguins) #> Loading required package: palmerpenguins process_text(palmerpenguins::penguins_raw) #> # A tibble: 344 × 17 #>    study_n…¹ sampl…² species region island stage indiv…³ clutc…⁴ date_…⁵ culme…⁶ #>    <chr>     <chr>   <chr>   <chr>  <chr>  <chr> <chr>   <chr>   <chr>   <chr>   #>  1 pal0708   1       adelie… anvers torge… adul… n1a1    yes     2007-1… 39.1    #>  2 pal0708   2       adelie… anvers torge… adul… n1a2    yes     2007-1… 39.5    #>  3 pal0708   3       adelie… anvers torge… adul… n2a1    yes     2007-1… 40.3    #>  4 pal0708   4       adelie… anvers torge… adul… n2a2    yes     2007-1… NA      #>  5 pal0708   5       adelie… anvers torge… adul… n3a1    yes     2007-1… 36.7    #>  6 pal0708   6       adelie… anvers torge… adul… n3a2    yes     2007-1… 39.3    #>  7 pal0708   7       adelie… anvers torge… adul… n4a1    no      2007-1… 38.9    #>  8 pal0708   8       adelie… anvers torge… adul… n4a2    no      2007-1… 39.2    #>  9 pal0708   9       adelie… anvers torge… adul… n5a1    yes     2007-1… 34.1    #> 10 pal0708   10      adelie… anvers torge… adul… n5a2    yes     2007-1… 42      #> # … with 334 more rows, 7 more variables: culmen_depth_mm <chr>, #> #   flipper_length_mm <chr>, body_mass_g <chr>, sex <chr>, #> #   delta_15_n_o_oo <chr>, delta_13_c_o_oo <chr>, comments <chr>, and #> #   abbreviated variable names ¹​study_name, ²​sample_number, ³​individual_id, #> #   ⁴​clutch_completion, ⁵​date_egg, ⁶​culmen_length_mm"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_extract_matches.html","id":null,"dir":"Reference","previous_headings":"","what":"Match string and extract the matched value — str_extract_matches","title":"Match string and extract the matched value — str_extract_matches","text":"Match string extract matched value","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_extract_matches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match string and extract the matched value — str_extract_matches","text":"","code":"str_extract_matches(string, pattern)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_extract_matches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match string and extract the matched value — str_extract_matches","text":"string string search pattern regex pattern match","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_extract_matches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match string and extract the matched value — str_extract_matches","text":"matched string","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_extract_matches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match string and extract the matched value — str_extract_matches","text":"","code":"require(dplyr) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union require(tidyr) #> Loading required package: tidyr dplyr::mutate(dplyr::starwars,       match = str_extract_matches(name, \"Skywalker\")) |>   dplyr::select(last_col()) #> # A tibble: 87 × 1 #>    match     #>    <chr>     #>  1 Skywalker #>  2 NA        #>  3 NA        #>  4 NA        #>  5 NA        #>  6 NA        #>  7 NA        #>  8 NA        #>  9 NA        #> 10 NA        #> # … with 77 more rows"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_parse_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse string into individual terms (as tibble) — str_parse_term","title":"Parse string into individual terms (as tibble) — str_parse_term","text":"Parse string individual terms (tibble)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_parse_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse string into individual terms (as tibble) — str_parse_term","text":"","code":"str_parse_term(term)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_parse_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse string into individual terms (as tibble) — str_parse_term","text":"search_term","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_parse_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse string into individual terms (as tibble) — str_parse_term","text":"tibble unique terms term","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/str_parse_term.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse string into individual terms (as tibble) — str_parse_term","text":"","code":"require(stringr) require(purrr) #> Loading required package: purrr require(tibble) #> Loading required package: tibble str_parse_term(term = \"A large size in stockings is hard to sell.\") #> # A tibble: 9 × 2 #>   `Unique Items` Term                                       #>   <chr>          <chr>                                      #> 1 A              A large size in stockings is hard to sell. #> 2 large          NA                                         #> 3 size           NA                                         #> 4 in             NA                                         #> 5 stockings      NA                                         #> 6 is             NA                                         #> 7 hard           NA                                         #> 8 to             NA                                         #> 9 sell.          NA"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 theme (doping data) — theme_ggp2g","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"ggplot2 theme (doping data)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"","code":"theme_ggp2g(   base_size = 11,   base_family = \"Ubuntu\",   base_line_size = base_size/22,   base_rect_size = base_size/22 )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"base_size size font base_family family font base_line_size size lines base graph base_rect_size size rectangle base graph","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"ggplot object","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":null,"dir":"","previous_headings":"","what":"setup","title":"setup","text":"following commands used push initial package Github:","code":"git init git add -A git commit -m \"initial commit\" git remote add origin git@github.com:mjfrigaard/dopingdata.git git branch -M main git push -u origin main Enumerating objects: 230, done. Counting objects: 100% (230/230), done. Delta compression using up to 12 threads Compressing objects: 100% (224/224), done. Writing objects: 100% (230/230), 10.09 MiB | 2.42 MiB/s, done. Total 230 (delta 16), reused 0 (delta 0), pack-reused 0 remote: Resolving deltas: 100% (16/16), done. To github.com:mjfrigaard/dopingdata.git  * [new branch]      main -> main branch 'main' set up to track 'origin/main'."},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":"pkgdown-setup","dir":"","previous_headings":"","what":"pkgdown setup","title":"setup","text":"site built: deployed locally : file:///Users/mjfrigaard/projects/dopingdata/docs/index.html","code":"usethis::use_pkgdown() ✔ Setting active project to '/Users/mjfrigaard/projects/dopingdata' ✔ Adding '^_pkgdown\\\\.yml$', '^docs$', '^pkgdown$' to '.Rbuildignore' ✔ Adding 'docs' to '.gitignore' ✔ Writing '_pkgdown.yml' • Modify '_pkgdown.yml' pkgdown::build_site() -- Installing package into temporary library ----------------------------------------- == Building pkgdown site ======================================================= Reading from: '/Users/mjfrigaard/projects/dopingdata' Writing to:   '/Users/mjfrigaard/projects/dopingdata/docs' -- Initialising site ----------------------------------------------------------- Copying '../../Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.2/x86_64-apple-darwin17.0/pkgdown/2.0.7/16fa15449c930bf3a7761d3c68f8abf9/pkgdown/BS5/assets/link.svg' to 'link.svg' Copying '../../Library/Caches/org.R-project.R/R/renv/cache/v5/R-4.2/x86_64-apple-darwin17.0/pkgdown/2.0.7/16fa15449c930bf3a7761d3c68f8abf9/pkgdown/BS5/assets/pkgdown.js' to 'pkgdown.js' -- Building home --------------------------------------------------------------- Writing 'authors.html' Reading 'CODE_OF_CONDUCT.md' Writing 'CODE_OF_CONDUCT.html' Reading '_setup.md' Writing '_setup.html' Reading 'LICENSE.md' Writing 'LICENSE.html' Writing 'LICENSE-text.html' Writing '404.html' -- Building function reference ------------------------------------------------- Writing 'reference/index.html' Reading 'man/check_rtxt.Rd' Writing 'reference/check_rtxt.html' Reading 'man/create_dir_date.Rd' Writing 'reference/create_dir_date.html' Reading 'man/create_regex_wb.Rd' Writing 'reference/create_regex_wb.html' Reading 'man/dtstamp.Rd' Writing 'reference/dtstamp.html' Reading 'man/get_recent_path.Rd' Writing 'reference/get_recent_path.html' Reading 'man/get_recent.Rd' Writing 'reference/get_recent.html' Reading 'man/guess_basename.Rd' Writing 'reference/guess_basename.html' Reading 'man/nin.Rd' Writing 'reference/nin.html' Reading 'man/otherwise.Rd' Writing 'reference/otherwise.html' Reading 'man/polite_download_file.Rd' Writing 'reference/polite_download_file.html' Reading 'man/polite_fetch_rtxt.Rd' Writing 'reference/polite_fetch_rtxt.html' Reading 'man/polite_read_html.Rd' Writing 'reference/polite_read_html.html' Reading 'man/process_text.Rd' Writing 'reference/process_text.html' Reading 'man/run_app.Rd' Writing 'reference/run_app.html' Reading 'man/str_extract_matches.Rd' Writing 'reference/str_extract_matches.html' Reading 'man/str_parse_term.Rd' Writing 'reference/str_parse_term.html' Reading 'man/theme_ggp2g.Rd' Writing 'reference/theme_ggp2g.html' -- Building articles ----------------------------------------------------------- Writing 'articles/index.html' Reading 'vignettes/sanction-aaf-substances.Rmd' Writing 'articles/sanction-aaf-substances.html' Reading 'vignettes/sanction-adrv-substances.Rmd' Writing 'articles/sanction-adrv-substances.html' Reading 'vignettes/sanction-dates.Rmd' Writing 'articles/sanction-dates.html' Reading 'vignettes/sanction-sports.Rmd' Writing 'articles/sanction-sports.html' Reading 'vignettes/scraping-usada-proh-assoc.Rmd' Writing 'articles/scraping-usada-proh-assoc.html' Reading 'vignettes/scraping-usada-sanctions.Rmd' Writing 'articles/scraping-usada-sanctions.html' -- Building news --------------------------------------------------------------- Writing 'news/index.html' Writing 'sitemap.xml' -- Building search index ------------------------------------------------------- == DONE ======================================================================== -- Previewing site ------------------------------------------------------------"},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":"deploying-using-github-pages","dir":"","previous_headings":"","what":"Deploying using github pages","title":"setup","text":"setup GitHub pages, run following: completes following tasks: Add spice package website! Now set branch gh-pages GitHub deploy docs/ folder.","code":"usethis::use_pkgdown_github_pages() Overwrite pre-existing file '_pkgdown.yml'?  1: Yeah 2: Nope 3: Not now  Selection: 1 ✔ Writing '_pkgdown.yml' • Modify '_pkgdown.yml' ✔ Initializing empty, orphan 'gh-pages' branch in GitHub repo 'mjfrigaard/dopingdata' ✔ GitHub Pages is publishing from: • URL: 'https://mjfrigaard.github.io/dopingdata/' • Branch: 'gh-pages' • Path: '/' ✔ Creating '.github/' ✔ Adding '^\\\\.github$' to '.Rbuildignore' ✔ Adding '*.html' to '.github/.gitignore' ✔ Creating '.github/workflows/' ✔ Saving 'r-lib/actions/examples/pkgdown.yaml@v2' to '.github/workflows/pkgdown.yaml' • Learn more at <https://github.com/r-lib/actions/blob/v2/examples/README.md>. ✔ Recording 'https://mjfrigaard.github.io/dopingdata/' as site's url in '_pkgdown.yml' ✔ Adding 'https://mjfrigaard.github.io/dopingdata/' to URL field in DESCRIPTION ✔ Setting 'https://mjfrigaard.github.io/dopingdata/' as homepage of GitHub repo 'mjfrigaard/dopingdata' url: https://mjfrigaard.github.io/dopingdata/ template:   bootstrap: 5   bootswatch: minty   theme: gruvbox-dark   bslib:     base_font:       google: Ubuntu Mono     heading_font:       google: Ubuntu"},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"setup","text":"collection issues ’ve found using pkgdown gh-pages. ’m always somehow able get site deployed, takes extra effort! pkgdown build giving following error GitHub actions: might one following issues","code":"The deploy step encountered an error: The process '/usr/bin/git' failed with exit code 1 ❌"},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":"deployment-issues-with-git-lfs","dir":"","previous_headings":"","what":"Deployment issues with Git LFS","title":"setup","text":"Apparently might caused Git LFS (large file system), can either 1) remove following instructions , First check see lfs installed tracking files. nothing, ’re good go! 2) adding lfs actions/checkout step:","code":"git lfs ls-files git lfs uninstall Hooks for this repository have been removed. Global Git LFS configuration has been removed. # check files git lfs ls-files # remove files rm -rf .git/lfs # check files again git lfs ls-files steps:       - uses: actions/checkout@v3         with:           lfs: true"},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":"limited-github-actions-permissions","dir":"","previous_headings":"","what":"Limited Github Actions Permissions","title":"setup","text":"failed attempts pkgdown, noticed actions successful git push. can see new gh-pages branch checked : GitHub actions attempts push changes results following error: Change settings Settings > Actions > General: Workflow permissions bottom, Choose default permissions granted GITHUB_TOKEN running workflows repository. can specify granular permissions workflow using YAML… Workflows read write permissions repository scopes. https://github.com/ad-m/github-push-action/issues/96#issuecomment-1396347833","code":"/usr/bin/git checkout -B gh-pages origin/gh-pages Previous HEAD position was 287eac9 pkgdown build gh-pages Switched to a new branch 'gh-pages' branch 'gh-pages' set up to track 'origin/gh-pages'. Force-pushing changes... push --force ***github.com/mjfrigaard/dopingdata.git github-pages-deploy-action/8znmd9sst:gh-pages remote: Permission to mjfrigaard/dopingdata.git denied to github-actions[bot]. fatal: unable to access 'https://github.com/mjfrigaard/dopingdata.git/': The requested URL returned error: 403 Running post deployment cleanup jobs… 🗑️ Error: The deploy step encountered an error: The process '/usr/bin/git' failed with exit code 128 ❌ Notice: Deployment failed! ❌"},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":"updating","dir":"","previous_headings":"","what":"Updating","title":"setup","text":"Check post : deploy main, added .nojekyll file:","code":"git add -A # to see what changes are going to be committed git status  # commit changes git commit -m 'changes' # push git push origin main # go to the gh-pages branch git checkout gh-pages  # bring gh-pages up to date with main git rebase main # push the changes git push origin gh-pages  # return to the main branch git checkout main git branch --set-upstream-to=origin/<branch> gh-pages git branch --set-upstream-to=origin/main gh-pages touch .nojekyll"},{"path":"https://mjfrigaard.github.io/dopingdata/setup.html","id":"deploy-a-pkgdown-site-to-gh-pages-branch","dir":"","previous_headings":"","what":"Deploy a pkgdown site to gh-pages branch","title":"setup","text":"https://gist.github.com/AliciaSchep/f4287a4797d15d2b7923f12d5d9cc93d","code":"## Adapted from r-lib/pkgdown source code from RStudio https://github.com/r-lib/pkgdown  ## Helper functions, directly from pkgdown code -------------------------------- git <- function(...) {   processx::run(\"git\", c(...), echo_cmd = TRUE, echo = TRUE) }  github_clone <- function(dir, repo_slug) {   remote_url <- sprintf(\"git@github.com:%s.git\", repo_slug)   cli::rule(\"Cloning existing site\", line = 1)   git(\"clone\",       \"--single-branch\", \"-b\", \"gh-pages\",       \"--depth\", \"1\",       remote_url,       dir   ) }  github_push <- function(dir, commit_message) {   # force execution before changing working directory   force(commit_message)      cli::rule(\"Commiting updated site\", line = 1)      withr::with_dir(dir, {     git(\"add\", \"-A\", \".\")     git(\"commit\", \"--allow-empty\", \"-m\", commit_message)          cli::rule(\"Deploying to GitHub Pages\", line = 1)     git(\"remote\", \"-v\")     git(\"push\", \"--force\", \"origin\", \"HEAD:gh-pages\")   }) }  ## Deploy function, adapted from deploy_local ---------------------------------- deploy_site_github_local <- function(repo, preview = TRUE, delete_previous = FALSE, ...) {   # repo is the github repository, e.g. \"username/repo\"   # preview is to whether to first preview the site before pushing   # delete_previous is a flag to delete previous gh_pages branch content   # ... are additional parameters to build_site   dest_dir <- fs::dir_create(fs::file_temp())   on.exit(fs::dir_delete(dest_dir))      github_clone(dest_dir, repo)   if (delete_previous) {     # This may be necessary if the branch has stuff not built by pkgdown     fs::dir_map(dest_dir, fs::file_delete)   }   pkgdown::build_site(\".\",              override = list(destination = dest_dir),              document = FALSE,              preview = FALSE,              ...   )      if (preview) {     browseURL(fs::path(dest_dir, \"index.html\"))     push <- utils::menu(c(\"Yes\",\"No\"), title = \"Push site?\") == 1   } else {     push <- TRUE   }      if (push) {     github_push(dest_dir, \"Building new version of pkgdown website\")   }      invisible() }"},{"path":"https://mjfrigaard.github.io/dopingdata/news/index.html","id":"dopingdata-0009000","dir":"Changelog","previous_headings":"","what":"dopingdata 0.0.0.9000","title":"dopingdata 0.0.0.9000","text":"Added NEWS.md file track changes package. Pushed site gh-pages branch using pkgdown (see _setup.md info). Add vignettes: sanction-dates sanction-sports sanction-aaf-substances sanction-adrv-substances","code":""}]

[{"path":[]},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement Martin Frigaard. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Martin Frigaard Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"usada-sanction-data","dir":"Articles","previous_headings":"","what":"USADA sanction data","title":"Scraping USADA sanctions","text":"data ’ll downloading comes USADA sanctions table.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"use-your-manners","dir":"Articles","previous_headings":"","what":"Use your manners","title":"Scraping USADA sanctions","text":"package built top efforts fine people collected, organized, shared data, ’re going use polite package harvesting HTML tables. install package, run code : polite many options ethically scraping data (check package website information), ’ve chosen follow handy polite template:","code":"devtools::install_github(\"dmi3kno/polite\") library(polite) polite::use_manners()"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"check-robots-txt","dir":"Articles","previous_headings":"Use your manners","what":"Check robots.txt","title":"Scraping USADA sanctions","text":"’ll check robots.txt file scraping website: three paths TRUE, also check domain robotstxt::get_robotstxt(): can see Allow: / configuration gives us access download data.","code":"# retrieval rtxt <- robotstxt::robotstxt(domain = \"https://www.usada.org/\")  # printing rtxt$check(   # check permissions    paths = c(\"testing/\",              \"testing/results/\",              \"testing/results/sanctions/\"),   # bots   bot   = \"*\" ) #> [1] TRUE TRUE TRUE rt <- robotstxt::get_robotstxt(   domain = \"https://www.usada.org/testing/results/sanctions/\") # printing cat(rt[1]) #> # robots.txt overwrite by: on_suspect_content #>  #> User-agent: * #> Allow: /"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"scraping-with-polite-and-rvest","dir":"Articles","previous_headings":"Use your manners","what":"Scraping with polite and rvest","title":"Scraping USADA sanctions","text":"steps used scrape sanctions table:","code":"usada_url = \"https://www.usada.org/testing/results/sanctions/\" usada_nodes <- polite::bow(usada_url) |>    polite::scrape() |>    rvest::html_nodes(\"table\")  usada_sanctions_raw <- rvest::html_table(usada_nodes[[1]])"},{"path":"https://mjfrigaard.github.io/dopingdata/articles/scraping-usada-sanctions.html","id":"exporting-raw-data","dir":"Articles","previous_headings":"Use your manners","what":"Exporting raw data","title":"Scraping USADA sanctions","text":"common tasks (like exporting raw data .csv file date-stamped folder file) wrapped functions: ’s also export_extdata() function ’re storing data package: raw data look like? can also use scrape_sanctions() function.","code":"export_data(   x = usada_sanctions_raw,    path = \"../dev\") #> Exporting data: ../dev/2023-12-21/2023-12-21-usada_sanctions_raw.csv #> Data successfully exported! export_extdata(   x = usada_sanctions_raw,    path = \"dev\") #> Exporting data: inst/extdata/dev/2023-12-21/2023-12-21-usada_sanctions_raw.csv #> Data successfully exported! dir(\"../inst/extdata/\", recursive = TRUE) #> character(0) usada_sanctions_raw <- read.csv(\"../dev/2023-12-19/2023-12-19-usada_sanctions_raw.csv\") str(usada_sanctions_raw) #> 'data.frame':    937 obs. of  5 variables: #>  $ Athlete           : chr  \"Rodriguez, Daniel\" \"Park, Mariah\" \"Frey, John\" \"Jha, Kanak\" ... #>  $ Sport             : chr  \"Mixed Martial Arts\" \"Weightlifting\" \"Cycling\" \"Table Tennis\" ... #>  $ Substance.Reason  : chr  \"Ostarine; LGD-4033\" \"Chlorthalidone\" \"Non-Analytical: Refusal to Submit to Sample Collection\" \"Non-Analytical: 3 Whereabouts Failures\" ... #>  $ Sanction.Terms    : chr  \"3-Month Suspenion\" \"Public Warning\" \"2-Year Suspension; Loss of Results\" \"1-Year Suspension; Loss of Results\" ... #>  $ Sanction.Announced: chr  \"12/14/2023\" \"12/11/2023\" \"12/05/2023\" \"Original: 3/20/2023; Updated: 12/01/2023\" ..."},{"path":"https://mjfrigaard.github.io/dopingdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Frigaard. Maintainer, author.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Frigaard M (2023). dopingdata: USADA doping data. R package version 0.0.0.9000, https://mjfrigaard.github.io/dopingdata/.","code":"@Manual{,   title = {dopingdata: USADA doping data},   author = {Martin Frigaard},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://mjfrigaard.github.io/dopingdata/}, }"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"dopingdata","dir":"","previous_headings":"","what":"USADA doping data","title":"USADA doping data","text":"dopingdata contains data United States Anti-Doping Agency exploration, modeling, visualizations. datasets package derived USADA website World Anti-Doping Agency (WADA) banned substances list. Scraping, processing, visualizing data presented many unique challenges decided combine utilities package.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"USADA doping data","text":"can install development version dopingdata like :","code":"# install.packages(\"devtools\") devtools::install_github(\"mjfrigaard/dopingdata\") library(dopingdata)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"scraping-usada-data","dir":"","previous_headings":"","what":"Scraping USADA Data","title":"USADA doping data","text":"dataset harvested using rvest xml2 packages, using manners (polite package). dopingdata results lot datasets, ’ve written two helper functions (example raw dataset demonstrate).","code":"scrape_sanctions(dest_path = \"data-raw/csv\") Exporting data: data-raw/csv/2023-12-20/2023-12-20-usada_raw.csv Data successfully exported! str(example_usada_raw) #> 'data.frame':    250 obs. of  5 variables: #>  $ Athlete           : chr  \"*Name Removed\" \"Richardson, Sha'Carri\" \"*Name Removed\" \"*Name Removed\" ... #>  $ Sport             : chr  \"Cycling\" \"Track and Field\" \"Track and Field\" \"Bobsled and Skeleton\" ... #>  $ Substance.Reason  : chr  \"Non-Analytical: Use and Possession (EPO)\" \"Cannabinoids\" \"Non-Analytical: Refusal to Submit to Sample Collection\" \"Elevated T/E\" ... #>  $ Sanction.Terms    : chr  \"2-Year Suspension - Loss of Results\" \"1-Month Suspension; Loss of Results\" \"2-Year Suspension - Loss of Results\" \"2-Year Suspension - Loss of Results\" ... #>  $ Sanction.Announced: chr  \"\" \"07/02/2021\" \"\" \"\" ..."},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"export_data","dir":"","previous_headings":"Scraping USADA Data","what":"export_data()","title":"USADA doping data","text":"export_data() export data various types (.csv, .tsv, .rds, etc.) designated path:","code":"export_data(x = example_usada_raw, path = \"dev\", type = \"rds\") #> Exporting data: dev/2023-12-21/2023-12-21-example_usada_raw.rds #> Data successfully exported!"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"export_extdata","dir":"","previous_headings":"Scraping USADA Data","what":"export_extdata()","title":"USADA doping data","text":"export_extdata() similiar, exports data inst/ folder (helpful writing R packages).","code":"export_extdata(x = example_usada_raw, path = \"raw\", type = \"csv\") #> Exporting data: inst/extdata/raw/2023-12-21/2023-12-21-example_usada_raw.csv #> Data successfully exported!"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"process_text","dir":"","previous_headings":"Scraping USADA Data","what":"process_text()","title":"USADA doping data","text":"process_text() performs following: Processed data column names formatted snake_case text converted lowercase ’ll import scraped data data-raw/csv/ process text:","code":"#> 'data.frame':    937 obs. of  5 variables: #>  $ athlete           : chr  \"rodriguez, daniel\" \"park, mariah\" \"frey, john\" \"jha, kanak\" ... #>  $ sport             : chr  \"mixed martial arts\" \"weightlifting\" \"cycling\" \"table tennis\" ... #>  $ substance_reason  : chr  \"ostarine; lgd-4033\" \"chlorthalidone\" \"non-analytical: refusal to submit to sample collection\" \"non-analytical: 3 whereabouts failures\" ... #>  $ sanction_terms    : chr  \"3-month suspenion\" \"public warning\" \"2-year suspension; loss of results\" \"1-year suspension; loss of results\" ... #>  $ sanction_announced: chr  \"12/14/2023\" \"12/11/2023\" \"12/05/2023\" \"original: 3/20/2023; updated: 12/01/2023\" ..."},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"dates","dir":"","previous_headings":"","what":"Dates","title":"USADA doping data","text":"sanction_announced contains date sanction announced, 30 contain two values (original updated). Wrangling values pose challenges aren’t consistently messy:","code":"subset(usada,    grepl(\"^original\", usada[['sanction_announced']]),    c(athlete, sanction_announced))"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"clean_dates","dir":"","previous_headings":"Dates","what":"clean_dates()","title":"USADA doping data","text":"’ve written clean_dates() function takes date_col, split pattern arguments: df = processed USADA dataset messy dates date_col = sanction date column (usually sanction_announced) split = regex pass split argument strsplit() (defaults \"updated\") pattern = regex non-date pattern (defaults \"original\") example dataset demonstrate clean_dates() works: usada, split data three data.frames (bad_dates, good_dates, no_dates). Clean dates bad_dates splitting bad dates \"updated\" provided \"original\" pattern (opposite also work). sanction_date column contain correctly formatted updated sanction_date. formatting good_dates removing original_date column can combine two rbind(). Export usada_dates data-raw/csv folder.","code":"clean_dates(   df = example_sanction_dates,    date_col = \"ugly_dates\",    split = \"updated\",    pattern = \"original\") bad_dates <- subset(usada,    grepl(\"^original\", usada[['sanction_announced']])) good_dates <- subset(usada,    !grepl(\"^original\", usada[['sanction_announced']]) & sanction_announced != \"\") no_dates <- subset(usada,   athlete == \"*name removed\" & sanction_announced == \"\") cleaned_dates <- clean_dates(   df = bad_dates,    date_col = \"sanction_announced\",    split = \"updated\",    pattern = \"original\") # address names  names(cleaned_dates)[names(cleaned_dates) == 'split_date'] <- 'sanction_date' names(cleaned_dates)[names(cleaned_dates) == 'pattern_date'] <- 'original_date' # format good_dates good_dates$sanction_date <- as.Date(x = good_dates[['sanction_announced']],                                      format = \"%m/%d/%Y\") # get intersecting names  nms <- intersect(names(cleaned_dates), names(good_dates)) # bind the two datasets  usada_dates <- rbind(good_dates, cleaned_dates[nms]) str(usada_dates) #> 'data.frame':    649 obs. of  6 variables: #>  $ athlete           : chr  \"rodriguez, daniel\" \"park, mariah\" \"frey, john\" \"forrest, evan\" ... #>  $ sport             : chr  \"mixed martial arts\" \"weightlifting\" \"cycling\" \"weightlifting\" ... #>  $ substance_reason  : chr  \"ostarine; lgd-4033\" \"chlorthalidone\" \"non-analytical: refusal to submit to sample collection\" \"boldenone; drostanolone; methandienone; nandrolone; testosterone\" ... #>  $ sanction_terms    : chr  \"3-month suspenion\" \"public warning\" \"2-year suspension; loss of results\" \"3-year suspension; loss of results\" ... #>  $ sanction_announced: chr  \"12/14/2023\" \"12/11/2023\" \"12/05/2023\" \"11/30/2023\" ... #>  $ sanction_date     : Date, format: \"2023-12-14\" \"2023-12-11\" ... export_data(x = usada_dates, path = \"data-raw/csv\") #> Exporting data: data-raw/csv/2023-12-21/2023-12-21-usada_dates.csv #> Data successfully exported!"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"sports","dir":"","previous_headings":"","what":"Sports","title":"USADA doping data","text":"wrangle sports, ’ll use packages functions tidyverse (dplyr, stringr, tidyr, etc.), also provide base R alternatives (wherever possible). tidyverse functions return tibble (data.frame), prints fewer rows console. can start counting sport column:","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors usada_sports <- tibble::as_tibble(usada_dates) str(usada_sports) #> tibble [649 × 6] (S3: tbl_df/tbl/data.frame) #>  $ athlete           : chr [1:649] \"rodriguez, daniel\" \"park, mariah\" \"frey, john\" \"forrest, evan\" ... #>  $ sport             : chr [1:649] \"mixed martial arts\" \"weightlifting\" \"cycling\" \"weightlifting\" ... #>  $ substance_reason  : chr [1:649] \"ostarine; lgd-4033\" \"chlorthalidone\" \"non-analytical: refusal to submit to sample collection\" \"boldenone; drostanolone; methandienone; nandrolone; testosterone\" ... #>  $ sanction_terms    : chr [1:649] \"3-month suspenion\" \"public warning\" \"2-year suspension; loss of results\" \"3-year suspension; loss of results\" ... #>  $ sanction_announced: chr [1:649] \"12/14/2023\" \"12/11/2023\" \"12/05/2023\" \"11/30/2023\" ... #>  $ sanction_date     : Date[1:649], format: \"2023-12-14\" \"2023-12-11\" ... usada_sports |>    dplyr::count(sport, sort = TRUE)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"support-personnel","dir":"","previous_headings":"Sports","what":"Support personnel","title":"USADA doping data","text":"sports aren’t sports–’re athlete support personnel. need support_personnel identifier.","code":"usada_sports <- dplyr::mutate(usada_sports,    # support_personnel   support_personnel =      dplyr::if_else(condition = stringr::str_detect(       sport, \"support personnel\"),        true = TRUE, false = FALSE, missing = NA))   usada_sports |>    dplyr::filter(stringr::str_detect(sport, \"support personnel\")) |>    dplyr::count(sport, support_personnel) |>    tidyr::pivot_wider(names_from = support_personnel, values_from = n)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"track-and-field-or-track--field","dir":"","previous_headings":"Sports","what":"‘track and field’ or ‘track & field’","title":"USADA doping data","text":"Convert sports like track & field track field help determine athletes/support personnel involved multiple sports.","code":"usada_sports <- dplyr::mutate(usada_sports,   # track & field   sport = stringr::str_replace_all(sport, 'track and field', 'track & field'))  usada_sports |>    dplyr::filter(stringr::str_detect(sport, \"track\")) |>    dplyr::count(sport, support_personnel) |>    tidyr::pivot_wider(names_from = support_personnel, values_from = n)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"spelling","dir":"","previous_headings":"Sports","what":"Spelling","title":"USADA doping data","text":"incorrect spelling brazilian jiu-jitsu (brazillian jiu-jitsu) corrected .","code":"usada_sports <- dplyr::mutate(usada_sports,    # brazilian jiu-jitsu   sport = dplyr::case_when(     sport == 'brazillian jiu-jitsu' ~ 'brazilian jiu-jitsu',     TRUE ~ sport))  usada_sports |>    dplyr::filter(stringr::str_detect(sport, \"jitsu\")) |>    dplyr::count(sport, sort = TRUE)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"paralympic","dir":"","previous_headings":"Sports","what":"‘paralympic’","title":"USADA doping data","text":"identifier paralympic sports: paralympic.","code":"usada_sports <- dplyr::mutate(usada_sports,    # paralympic   paralympic =      dplyr::if_else(condition = stringr::str_detect(sport, \"paralympic|para\"),        true = TRUE, false = FALSE, missing = NA))   usada_sports |>    dplyr::filter(stringr::str_detect(sport, \"paralympic|para\")) |>    dplyr::count(paralympic, sport) |>    tidyr::pivot_wider(names_from = paralympic, values_from = n)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"multiple-sports","dir":"","previous_headings":"Sports","what":"Multiple sports","title":"USADA doping data","text":"Identify multiple sports using , regular expression.","code":"usada_sports <- dplyr::mutate(usada_sports,    # multiple_sports   multiple_sports =      if_else(condition = stringr::str_detect(sport, \"and |, \"),        true = TRUE, false = FALSE, missing = NA))  usada_sports |>    dplyr::filter(stringr::str_detect(sport, \"and |, \")) |>    dplyr::count(multiple_sports, sport) |>    tidyr::pivot_wider(names_from = multiple_sports, values_from = n)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"tidy","dir":"","previous_headings":"Sports","what":"Tidy","title":"USADA doping data","text":"Separate multi-sport athletes usada_sports multp_sport_athletes single-sport athletes single_sport_athletes. athletes listed multiple sports occupy multiple rows ‘tidy’ version usada_sports. Passing sport column tidyr::separate_rows() stringr::str_trim() multp_sport_athletes create tidy_multp_sport_athletes dataset: Finally, combine two datasets.","code":"multp_sport_athletes <- usada_sports |>    dplyr::filter(multiple_sports == TRUE) str(multp_sport_athletes) #> tibble [11 × 9] (S3: tbl_df/tbl/data.frame) #>  $ athlete           : chr [1:11] \"allison, kyler\" \"blandford, jenna\" \"cruse, j.c.\" \"schrodt, patrick \\\"dillon\\\"\" ... #>  $ sport             : chr [1:11] \"bobsled and skeleton\" \"cycling, triathlon\" \"bobsled and skeleton\" \"bobsled and skeleton\" ... #>  $ substance_reason  : chr [1:11] \"non-analytical: refusal to submit to sample collection\" \"non-analytical: use and possession (testosterone, hgh and oxandrolone)\" \"dimethylbutylamine (dmba)\" \"dimethylbutylamine (dmba)\" ... #>  $ sanction_terms    : chr [1:11] \"4-year suspension; loss of results; sanction tolled due to retirement\" \"4-year suspension - loss of results\" \"16-month suspension - loss of results\" \"16-month suspension - loss of results\" ... #>  $ sanction_announced: chr [1:11] \"10/09/2019\" \"11/28/2017\" \"07/20/2017\" \"04/06/2017\" ... #>  $ sanction_date     : Date[1:11], format: \"2019-10-09\" \"2017-11-28\" ... #>  $ support_personnel : logi [1:11] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ paralympic        : logi [1:11] FALSE FALSE FALSE FALSE TRUE FALSE ... #>  $ multiple_sports   : logi [1:11] TRUE TRUE TRUE TRUE TRUE TRUE ... single_sport_athletes <- usada_sports |>    dplyr::filter(multiple_sports == FALSE) str(single_sport_athletes) #> tibble [638 × 9] (S3: tbl_df/tbl/data.frame) #>  $ athlete           : chr [1:638] \"rodriguez, daniel\" \"park, mariah\" \"frey, john\" \"forrest, evan\" ... #>  $ sport             : chr [1:638] \"mixed martial arts\" \"weightlifting\" \"cycling\" \"weightlifting\" ... #>  $ substance_reason  : chr [1:638] \"ostarine; lgd-4033\" \"chlorthalidone\" \"non-analytical: refusal to submit to sample collection\" \"boldenone; drostanolone; methandienone; nandrolone; testosterone\" ... #>  $ sanction_terms    : chr [1:638] \"3-month suspenion\" \"public warning\" \"2-year suspension; loss of results\" \"3-year suspension; loss of results\" ... #>  $ sanction_announced: chr [1:638] \"12/14/2023\" \"12/11/2023\" \"12/05/2023\" \"11/30/2023\" ... #>  $ sanction_date     : Date[1:638], format: \"2023-12-14\" \"2023-12-11\" ... #>  $ support_personnel : logi [1:638] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ paralympic        : logi [1:638] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ multiple_sports   : logi [1:638] FALSE FALSE FALSE FALSE FALSE FALSE ... tidy_multp_sport_athletes <- multp_sport_athletes |>    tidyr::separate_rows(sport, sep = \"and|, \") |>    dplyr::mutate(sport = stringr::str_trim(sport, side = \"both\")) str(tidy_multp_sport_athletes) #> tibble [23 × 9] (S3: tbl_df/tbl/data.frame) #>  $ athlete           : chr [1:23] \"allison, kyler\" \"allison, kyler\" \"blandford, jenna\" \"blandford, jenna\" ... #>  $ sport             : chr [1:23] \"bobsled\" \"skeleton\" \"cycling\" \"triathlon\" ... #>  $ substance_reason  : chr [1:23] \"non-analytical: refusal to submit to sample collection\" \"non-analytical: refusal to submit to sample collection\" \"non-analytical: use and possession (testosterone, hgh and oxandrolone)\" \"non-analytical: use and possession (testosterone, hgh and oxandrolone)\" ... #>  $ sanction_terms    : chr [1:23] \"4-year suspension; loss of results; sanction tolled due to retirement\" \"4-year suspension; loss of results; sanction tolled due to retirement\" \"4-year suspension - loss of results\" \"4-year suspension - loss of results\" ... #>  $ sanction_announced: chr [1:23] \"10/09/2019\" \"10/09/2019\" \"11/28/2017\" \"11/28/2017\" ... #>  $ sanction_date     : Date[1:23], format: \"2019-10-09\" \"2019-10-09\" ... #>  $ support_personnel : logi [1:23] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ paralympic        : logi [1:23] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ multiple_sports   : logi [1:23] TRUE TRUE TRUE TRUE TRUE TRUE ... tidy_sports <- dplyr::bind_rows(single_sport_athletes, tidy_multp_sport_athletes) str(tidy_sports) #> tibble [661 × 9] (S3: tbl_df/tbl/data.frame) #>  $ athlete           : chr [1:661] \"rodriguez, daniel\" \"park, mariah\" \"frey, john\" \"forrest, evan\" ... #>  $ sport             : chr [1:661] \"mixed martial arts\" \"weightlifting\" \"cycling\" \"weightlifting\" ... #>  $ substance_reason  : chr [1:661] \"ostarine; lgd-4033\" \"chlorthalidone\" \"non-analytical: refusal to submit to sample collection\" \"boldenone; drostanolone; methandienone; nandrolone; testosterone\" ... #>  $ sanction_terms    : chr [1:661] \"3-month suspenion\" \"public warning\" \"2-year suspension; loss of results\" \"3-year suspension; loss of results\" ... #>  $ sanction_announced: chr [1:661] \"12/14/2023\" \"12/11/2023\" \"12/05/2023\" \"11/30/2023\" ... #>  $ sanction_date     : Date[1:661], format: \"2023-12-14\" \"2023-12-11\" ... #>  $ support_personnel : logi [1:661] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ paralympic        : logi [1:661] FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ multiple_sports   : logi [1:661] FALSE FALSE FALSE FALSE FALSE FALSE ..."},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"clean_sports","dir":"","previous_headings":"Sports","what":"clean_sports()","title":"USADA doping data","text":"steps combined clean_sports() function: Verify aren’t duplicates (). can see multi-sport athletes listed tidy_sports (one sport per row): Export tidy_sports data-raw/ Verify","code":"str(   clean_sports(     df = usada_dates,      sport_col = \"sport\",      tidy = TRUE) ) #> 'data.frame':    661 obs. of  9 variables: #>  $ athlete           : chr  \"rodriguez, daniel\" \"park, mariah\" \"frey, john\" \"forrest, evan\" ... #>  $ sport             : chr  \"mixed martial arts\" \"weightlifting\" \"cycling\" \"weightlifting\" ... #>  $ substance_reason  : chr  \"ostarine; lgd-4033\" \"chlorthalidone\" \"non-analytical: refusal to submit to sample collection\" \"boldenone; drostanolone; methandienone; nandrolone; testosterone\" ... #>  $ sanction_terms    : chr  \"3-month suspenion\" \"public warning\" \"2-year suspension; loss of results\" \"3-year suspension; loss of results\" ... #>  $ sanction_announced: chr  \"12/14/2023\" \"12/11/2023\" \"12/05/2023\" \"11/30/2023\" ... #>  $ sanction_date     : Date, format: \"2023-12-14\" \"2023-12-11\" ... #>  $ support_personnel : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ paralympic        : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... #>  $ multiple_sports   : logi  FALSE FALSE FALSE FALSE FALSE FALSE ... tidy_sports |>    dplyr::count(athlete, sanction_date, sport) |>    dplyr::filter(n > 1) tidy_sports |>      dplyr::filter(multiple_sports == TRUE) |>      dplyr::select(athlete, sport) export_data(   x = tidy_sports,    path = \"data-raw/csv\") #> Exporting data: data-raw/csv/2023-12-21/2023-12-21-tidy_sports.csv #> Data successfully exported! fs::dir_tree(\"data-raw/csv\") #> data-raw/csv #> └── 2023-12-21 #>     ├── 2023-12-21-tidy_sports.csv #>     ├── 2023-12-21-tidy_substances.csv #>     ├── 2023-12-21-usada_dates.csv #>     └── 2023-12-21-usada_raw.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"substances","dir":"","previous_headings":"","what":"Substances","title":"USADA doping data","text":"’ll start classifying ‘adverse analytic findings’ single banned substance. ’ve written get_recent_file() function quickly import .csv files specified directory:","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"get_recent_file","dir":"","previous_headings":"Substances","what":"get_recent_file()","title":"USADA doping data","text":"makes easy paste necessary import code console (R markdown file):","code":"pth <- paste0(\"data-raw/csv/\", Sys.Date(), \"/\") get_recent_file(pth, regex = 'sports', ext = '.csv') #> File last changed: 2023-12-21 12:11:28.122484 #> File name: 2023-12-21-tidy_sports.csv #> ✔ import code pasted to clipboard! tidy_sports <- read.delim(file = 'data-raw/csv/2023-12-21/2023-12-21-tidy_sports.csv', sep = ',')"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"aafs-vs-adrvs","dir":"","previous_headings":"Substances > get_recent_file()","what":"AAFs vs ADRVs","title":"USADA doping data","text":"sanctions divided two categories: analytic: Adverse Analytical Finding, AAF; AAF report WADA-accredited laboratory identifies presence prohibited substance /metabolites markers sample. non-analytic: Non-Analytical Anti-doping Rule Violation ADRV; non-analytical anti-doping rule violation stem positive urine blood sample, instead originates , substantiated , evidence doping violations athlete athlete support personnel..","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"substancereason","dir":"","previous_headings":"Substances > get_recent_file()","what":"Substance/reason","title":"USADA doping data","text":"substance_reason column contains details sanction, can include following information: name banned substance description infraction (non-analytic) use regular expressions identify type substance behind sanction. See examples : non-analytic sanctions include terms non-analytic/non-analytical/etc., prefix substance_reason column.","code":"stringr::str_view(tidy_sports[['substance_reason']],    \"use \\\\(epo & hgh\\\\)\", match = TRUE) #> [638] │ erythropoietin (epo) and non-analytical: <use (epo & hgh)> stringr::str_view(tidy_sports[['substance_reason']],   \"tampering, complicity\", match = TRUE) #> [85] │ non-analytical: <tampering, complicity>"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"sanction_type","dir":"","previous_headings":"Substances > get_recent_file() > Substance/reason","what":"sanction_type","title":"USADA doping data","text":"can pass terms regular expressions create sanction_type variable, contain two values: non-analytic analytic. ’ll save variable new usada_substances dataset: Now can filter usada_substances analytical sanctions sanction_type. can identify single vs. multiple substances? Let’s take look four different sanctions example_sanction_type:","code":"usada_substances <- dplyr::mutate(.data = tidy_sports,     sanction_type = dplyr::case_when(       stringr::str_detect(string = substance_reason,         \"non-analytical\") ~ \"non-analytic\",       !stringr::str_detect(substance_reason,         \"non-analytical\") ~ \"analytic\",       TRUE ~ NA_character_     )   ) usada_substances |>   dplyr::count(sanction_type, sort = TRUE)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"substance_cat","dir":"","previous_headings":"Substances > get_recent_file() > Substance/reason","what":"substance_cat","title":"USADA doping data","text":"can see two analytic two non-analytic sanctions, one single multiple substance/reason. Fortunately, sanctions multiple items separated either semicolons (;), commas (,), conjunction (), can use regular expression separate items. substance_cat identifier can used separate sanctions multiple substance/reasons sanctions single substance reason.","code":"dplyr::mutate(example_sanction_type,   substance_cat = case_when(     # identify the multiple_sr substances using a regular expression     stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~ 'multiple',     # negate the regular expression for the single substances     !stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~ 'single',     TRUE ~ NA_character_)) |>   dplyr::count(substance_cat, substance_reason) |>    tidyr::pivot_wider(names_from = substance_cat, values_from = n) usada_substances <- usada_substances |>   dplyr::mutate(substance_cat = dplyr::case_when(     stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~ 'multiple',     !stringr::str_detect(substance_reason, \"; |, | and | & | / \") ~ 'single',     TRUE ~ NA_character_)) usada_substances |>    dplyr::count(substance_cat, sort = TRUE)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"single-analytic-substances","dir":"","previous_headings":"Substances","what":"Single analytic substances","title":"USADA doping data","text":"First create dataset contains sanctions single substance listed. View top ten single analytic substances:","code":"single_analytic_substances <- usada_substances |>   dplyr::filter(substance_cat == 'single' & sanction_type == \"analytic\") single_analytic_substances |>    count(substance_reason, sort = TRUE) |>    head(10)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"multiple-analytic-substances","dir":"","previous_headings":"Substances","what":"Multiple analytic substances","title":"USADA doping data","text":"Next create dataset sanctions listing multiple substances substance_reason. Store multiple_analytic_substances. View top ten multiple analytic substances:","code":"multiple_analytic_substances <- usada_substances |>   dplyr::filter(substance_cat == 'multiple' & sanction_type == \"analytic\") multiple_analytic_substances |>    count(substance_reason, sort = TRUE) |>    head(10)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"tidy-substances","dir":"","previous_headings":"Substances > Multiple analytic substances","what":"Tidy substances","title":"USADA doping data","text":"Tidying sanctions multiple WADA banned substances (.e., one substance per athlete per row) result certain athletes appearing dataset . regular expressions cover range semicolons, tabs, spaces identify separate substance.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"add_match_col","dir":"","previous_headings":"Substances > Multiple analytic substances","what":"add_match_col()","title":"USADA doping data","text":"’ve written add_match_col() function, creates new 'matched' column matched regular expression pattern (’s like str_view(), data.frame/tibble). used add_match_col() determining correct pattern match (.e., substances listing metabolites): rows matching correctly regular expression pattern. regular expression differentiate multiple substances sample multiple_analytic_substances. pattern passed tidyr::separate_rows() (similar multiple-sport athletes ). final step trims white space tidy substance_reason column. output stored tidy_multiple_substances. Now single multiple substances tidy formats, can bind together single tidy_substances dataset. top 10 substances :","code":"dplyr::mutate(multiple_analytic_substances,   # add matched column   matched = add_match_col(     string = substance_reason,      pattern = \"and its metabolite|and its metabolites|its metabolite\")) |>    dplyr::select(substance_reason, dplyr::last_col()) |>    dplyr::filter(!is.na(matched)) dplyr::sample_n(multiple_analytic_substances, size = 10, replace = FALSE) |>    dplyr::mutate(     # replace plurals       substance_reason = stringr::str_replace_all(substance_reason,         \"and its metabolite|and its metabolites|its metabolite\",         \"(metabolite)\")) |>      tidyr::separate_rows(substance_reason,          sep = \"; |;\\t|\\\\t|, |;| and |and a |and | & | / \") |>      dplyr::select(athlete, substance_reason) tidy_multiple_substances <- dplyr::mutate(multiple_analytic_substances,   # replace plurals     substance_reason = stringr::str_replace_all(substance_reason,       \"and its metabolite|and its metabolites|its metabolite\",       \"(metabolite)\")) |>    tidyr::separate_rows(substance_reason,        sep = \"; |;\\t|\\\\t|, |;| and |and a |and | & | / \") |>    dplyr::mutate(substance_reason = trimws(substance_reason, \"both\")) tidy_substances <- rbind(single_analytic_substances, tidy_multiple_substances) tidy_substances |>    dplyr::count(substance_reason, sort = TRUE) |>    head(10)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"classifying-substances","dir":"","previous_headings":"Substances","what":"Classifying substances","title":"USADA doping data","text":"identify WADA banned substances, ’ve written classify_wada_substances(), function scans substance_reason column identifies substances found WADA list. See classify_wada_substances() documentation information.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"classify_wada_substances","dir":"","previous_headings":"Substances > Classifying substances","what":"classify_wada_substances()","title":"USADA doping data","text":"classify_wada_substances() creates substance_group variable WADA classifications (stored dopingdata::wada_classes): dopingdata stores vectors substance group WADA list (S1 ANABOLIC AGENTS substances ): substance group vectors also stored regular expressions (s1_regex), can use match substance_reason column (see example using dopingdata::example_tidy_substances dataset): output classify_wada_substances() can used answer questions like: substance_group’s appear ?","code":"dopingdata::wada_classes head(dopingdata::s1_substances, 10) #>  [1] \"3α-hydroxy-5α-androst-1-en-17-one\"               #>  [2] \"androgenic anabolic steroid\"                     #>  [3] \"androgenic anabolic steroids\"                    #>  [4] \"anabolic agent\"                                  #>  [5] \"anabolic agents\"                                 #>  [6] \"anabolic steroid\"                                #>  [7] \"anabolic steroids\"                               #>  [8] \"androstenedione\"                                 #>  [9] \"metabolites of androstenedione\"                  #> [10] \"1-androstenediol (5α-androst-1-ene-3β,17β-diol)\" stringr::str_view(string = example_tidy_substances$substance_reason,   pattern = s1_regex, match = TRUE) #> [10] │ <androgenic anabolic steroid> tidy_substances <- classify_wada_substances(   usada_data = tidy_substances,   subs_column = \"substance_reason\")"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"unclassified-single-substances","dir":"","previous_headings":"Substances","what":"UNCLASSIFIED single substances","title":"USADA doping data","text":"following single substances marked UNCLASSIFIED: final unclassified substance actually result miss-classified sanction type (rodriguez, yair). particular athlete, sanction_type non-analytic, substance_group missing (NA_character_)","code":"tidy_substances |>   dplyr::filter(       substance_cat == \"single\" &        substance_group == \"UNCLASSIFIED\" &        substance_reason != \"\") |>   dplyr::distinct(athlete, substance_reason) tidy_substances |>   dplyr::filter(athlete == \"rodriguez, yair\") |>   dplyr::select(athlete, substance_reason, substance_group, sanction_type) tidy_substances <- tidy_substances |>   dplyr::mutate(sanction_type = case_when(     athlete == \"rodriguez, yair\" ~ \"non-analytic\",     TRUE ~ sanction_type   )) |>    dplyr::mutate(substance_group = case_when(     athlete == \"rodriguez, yair\" ~ NA_character_,     TRUE ~ substance_group   ))  tidy_substances |>   dplyr::filter(athlete == \"rodriguez, yair\") |>   dplyr::select(athlete, substance_reason, substance_group, sanction_type)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"unclassified-multiple-substances","dir":"","previous_headings":"Substances","what":"UNCLASSIFIED multiple substances","title":"USADA doping data","text":"","code":"tidy_substances |>   dplyr::filter(       substance_cat == \"multiple\" &        substance_group == \"UNCLASSIFIED\" &        substance_reason != \"\") |>   dplyr::distinct(substance_reason)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"re-classifying-substances","dir":"","previous_headings":"Substances","what":"Re-classifying substances","title":"USADA doping data","text":"substances classified using standard WADA list can added reclass_substance()","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"reclass_substance","dir":"","previous_headings":"Substances > Re-classifying substances","what":"reclass_substance()","title":"USADA doping data","text":"reclass_substance() takes df, substance, value (substances can also added relative vector regular expression data-raw/). reclassifying substances , can review remaining UNCLASSIFIED/multiple sanctions: remaining UNCLASSIFIED substances marked non-analytic sanctions sanction_type: non-analytic sanctions missing (NA_character_) values substance_group: can remove missing substance_reason values Now substances properly classified Adverse Analytical Findings. non-analytic sanctions truly Non-Analytical Anti-doping Rule Violations. Export tidy_substances data-raw/ Verify","code":"# arimistane ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"arimistane\",   value = \"S4 HORMONE AND METABOLIC MODULATORS\") # torasemide ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"torasemide\",   value = \"S5 DIURETICS/MASKING AGENTS\") # igf-1 ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"igf-1\",   value = \"S2 PEP HORMONES/G FACTORS/MIMETICS\") # human chorionic gonadotropin (hcg)  ---- # https://www.usada.org/athletes/antidoping101/athlete-guide-anti-doping/ # https://www.usada.org/spirit-of-sport/education/wellness-and-anti-aging-clinics/ tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"^human chorionic gonadotropin \\\\(hcg\\\\)$\",   value = \"S2 PEP HORMONES/G FACTORS/MIMETICS\") # intact human chorionic gonadtrophin (hcg)  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"^intact human chorionic gonadtrophin \\\\(hcg\\\\)$\",   value = \"S2 PEP HORMONES/G FACTORS/MIMETICS\") # aod-9064  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"aod-9064\",   value = \"S2 PEP HORMONES/G FACTORS/MIMETICS\") # s-23  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"s-23\",   value = \"S1 ANABOLIC AGENTS\") # methenolone  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"methenolone\",   value = \"S1 ANABOLIC AGENTS\") # thiazide metabolite 4-amino-6-chloro-1,3-benzenedisulfonamide (acb)  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"^thiazide metabolite 4-amino-6-chloro-1,3-benzenedisulfonamide \\\\(acb\\\\)$\",   value = \"S5 DIURETICS/MASKING AGENTS\") # methylecgonine  ---- # https://www.usada.org/sanction/mike-alexandrov-accepts-doping-sanction/ tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"methylecgonine\",   value = \"S6 STIMULANTS\") # propylhexadrine  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"propylhexadrine\",   value = \"S6 STIMULANTS\") # androst-(2,3)-en-17-one  ---- # this needs an anchor  tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"androst-\\\\(2,3\\\\)-en-17-one\",   value = \"S1 ANABOLIC AGENTS\") # promagnon  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"promagnon\",   value = \"S1 ANABOLIC AGENTS\") # human chorionic gonadotrophin (hcg)  ---- tidy_substances <- reclass_substance(   df = tidy_substances,   substance = \"human chorionic gonadotrophin \\\\(hcg\\\\)\",   value = \"S2 PEP HORMONES/G FACTORS/MIMETICS\") tidy_substances |>   dplyr::filter(       substance_cat == \"multiple\" &        substance_group == \"UNCLASSIFIED\" &        substance_reason != \"\") |>   dplyr::distinct(substance_reason) tidy_substances <- tidy_substances |>    mutate(     sanction_type = dplyr::case_when(       substance_group == \"UNCLASSIFIED\" & substance_reason == \"possession\" ~ \"non-analytic\",       substance_group == \"UNCLASSIFIED\" & substance_reason == \"use/attempted use\" ~ \"non-analytic\",       substance_group == \"UNCLASSIFIED\" & substance_reason == \"evading sample collection\" ~ \"non-analytic\",       substance_group == \"UNCLASSIFIED\" & substance_reason == \"non-anatlyical: administration\" ~ \"non-analytic\",       substance_group == \"UNCLASSIFIED\" & substance_reason == \"trafficking\" ~ \"non-analytic\",       TRUE ~ sanction_type     )   ) tidy_substances <- tidy_substances |>    dplyr::mutate(     substance_group = dplyr::case_when(       sanction_type == \"non-analytic\" ~ NA_character_,       TRUE ~ substance_group)     ) tidy_substances <- dplyr::filter(tidy_substances, substance_reason != \"\") tidy_substances |>    dplyr::count(sanction_type, substance_group) |>    tidyr::pivot_wider(names_from = sanction_type, values_from = n) dplyr::filter(tidy_substances, sanction_type == \"non-analytic\") |>    dplyr::count(substance_reason, substance_cat) |>    tidyr::pivot_wider(names_from = substance_cat, values_from = n) export_data(   x = tidy_substances,    path = \"data-raw/csv\") #> Exporting data: data-raw/csv/2023-12-21/2023-12-21-tidy_substances.csv #> Data successfully exported! fs::dir_tree(\"data-raw/csv\") #> data-raw/csv #> └── 2023-12-21 #>     ├── 2023-12-21-tidy_sports.csv #>     ├── 2023-12-21-tidy_substances.csv #>     ├── 2023-12-21-usada_dates.csv #>     └── 2023-12-21-usada_raw.csv"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"visualize","dir":"","previous_headings":"","what":"Visualize","title":"USADA doping data","text":"","code":"library(ggplot2) library(extrafont) #> Registering fonts with R loadfonts(quiet = TRUE) library(tvthemes) library(ggwaffle)"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"adverse-analytical-findings","dir":"","previous_headings":"Visualize","what":"Adverse Analytical Findings","title":"USADA doping data","text":"","code":"tidy_substances |>   dplyr::filter(!is.na(substance_group)) |>   dplyr::mutate(substance_group = factor(substance_group)) |>   dplyr::count(substance_group, name = \"count\") |>   ggplot2::ggplot(ggplot2::aes(     x = count,     y = forcats::fct_reorder(substance_group, count)   )) +   ggplot2::geom_col() +    ggplot2::labs(     title = \"Total Adverse Analytical Findings\",     subtitle = \"What is the most common banned substance?\",     y = \"WADA Classification\", x = \"Counts\"   )"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"sports-1","dir":"","previous_headings":"Visualize","what":"Sports","title":"USADA doping data","text":"","code":"tidy_substances |>   dplyr::filter(!is.na(sport)) |>   dplyr::count(sport, name = \"count\", sort = TRUE) |>   head(10) |>    ggplot2::ggplot(ggplot2::aes(     x = count,     y = forcats::fct_reorder(as.factor(sport), count)   )) +   ggplot2::geom_col() +    ggplot2::labs(     title = \"Top Ten Sports with Sanctions\",     subtitle = \"What sports have the most adverse analytical findings?\",     y = \"Sport\", x = \"Number of Sanctions\"   )"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"top-adverse-analytical-findings--sports","dir":"","previous_headings":"Visualize","what":"Top Adverse Analytical Findings & Sports","title":"USADA doping data","text":"","code":"top3_sports <- tidy_substances |>   dplyr::filter(!is.na(sport)) |>   dplyr::count(sport, name = \"count\", sort = TRUE) |>   head(3) |>    dplyr::select(sport) |>    purrr::as_vector() |>    base::unname() tidy_substances |>    filter(sport %in% top3_sports &        substance_group %in%        c(\"S1 ANABOLIC AGENTS\",          \"S6 STIMULANTS\",          \"S4 HORMONE AND METABOLIC MODULATORS\",          \"S5 DIURETICS/MASKING AGENTS\",          \"S2 PEP HORMONES/G FACTORS/MIMETICS\",          \"S8 CANNABINOIDS\",          \"S3 BETA-2 AGONISTS\" )) |>    dplyr::mutate(substance_group = factor(substance_group)) |>   dplyr::count(substance_group, sport, name = \"count\") |>   ggplot2::ggplot(ggplot2::aes(     x = count,     y = forcats::fct_reorder(substance_group, count),      group = sport   )) +   ggplot2::geom_col(aes(fill = substance_group), width = 0.45) +    ggplot2::facet_wrap(~ sport, scales = 'free_x', nrow = 1) +   ggplot2::labs(     title = \"Top Adverse Analytical Findings\",     subtitle = \"Most Common Substances by Sport\",     y = \"WADA Classification\",      x = \"Total Sanctions\"   ) +    tvthemes::scale_fill_bigHero6(reverse = TRUE) +   ggplot2::theme_minimal() +   ggplot2::theme(legend.position = 'none')"},{"path":"https://mjfrigaard.github.io/dopingdata/index.html","id":"mma-substances","dir":"","previous_headings":"Visualize","what":"MMA Substances","title":"USADA doping data","text":"","code":"waffle_mma <- tidy_substances |>    dplyr::filter(sport == \"mixed martial arts\") |>        ggwaffle::waffle_iron(aes_d(group = substance_group))  ggplot2::ggplot(data = waffle_mma,         ggplot2::aes(x = x,             y = y,             fill = group)) +    ggwaffle::geom_waffle() +   ggplot2::theme(legend.position = \"right\") +   ggwaffle::theme_waffle() +    labs(title = \"Mixed martial arts\",     subtitle = \"Most common WADA banned substances\",     x = \"\", y = \"\") #> Warning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` in the `default_aes` field and elsewhere instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":"https://mjfrigaard.github.io/dopingdata/reference/add_match_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Create column with matched value (base R) — add_match_col","title":"Create column with matched value (base R) — add_match_col","text":"Create column matched value (base R)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/add_match_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create column with matched value (base R) — add_match_col","text":"","code":"add_match_col(string, pattern)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/add_match_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create column with matched value (base R) — add_match_col","text":"string string search pattern regex pattern match","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/add_match_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create column with matched value (base R) — add_match_col","text":"matched string","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/add_match_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create column with matched value (base R) — add_match_col","text":"","code":"terms <- data.frame(term = c(\"A cramp is no small danger on a swim.\",                             \"The soft cushion broke the man's fall.\",                              \"There is a lag between thought and act.\",                              \"Eight miles of woodland burned to waste.\")) terms$match_upper <- add_match_col(terms$term, \"[[:upper:]]\") terms$match_vowels <- add_match_col(terms$term, \"[aeiou]\") terms #>                                       term match_upper #> 1    A cramp is no small danger on a swim.           A #> 2   The soft cushion broke the man's fall.           T #> 3  There is a lag between thought and act.           T #> 4 Eight miles of woodland burned to waste.           E #>                         match_vowels #> 1          a, i, o, a, a, e, o, a, i #> 2       e, o, u, i, o, o, e, e, a, a #> 3 e, e, i, a, a, e, e, e, o, u, a, a #> 4 i, i, e, o, o, o, a, u, e, o, a, e"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/check_rtxt.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for checking robots.txt file — check_rtxt","title":"Function for checking robots.txt file — check_rtxt","text":"Function checking robots.txt file","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/check_rtxt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for checking robots.txt file — check_rtxt","text":"","code":"check_rtxt(url, delay, user_agent, force, verbose)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/check_rtxt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for checking robots.txt file — check_rtxt","text":"url web address download delay default delay user_agent user agent string force force re-downloading robots.xtx verbose logical","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify banned WADA substances — classify_wada_substances","title":"Classify banned WADA substances — classify_wada_substances","text":"usada_data table sanctions United States Anti-Doping Agency. substance_reason column contains justification sanction. cases, multiple substances/reasons, identified first.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify banned WADA substances — classify_wada_substances","text":"","code":"classify_wada_substances(usada_data, subs_column)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify banned WADA substances — classify_wada_substances","text":"usada_data scraped data USADA website subs_column column substances/reasons sanctions","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify banned WADA substances — classify_wada_substances","text":"substances dataset newly classified substances","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/classify_wada_substances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify banned WADA substances — classify_wada_substances","text":"","code":"example_sanction_type #>           sport                                           substance_reason #> 1      swimming                     non-analytical: 3 whereabouts failures #> 2 track & field                                               cannabinoids #> 3     triathlon                  androgenic anabolic steroid; cannabinoids #> 4 track & field non-analytical: tampering, administration, and trafficking substances <- classify_wada_substances(   usada_data = example_sanction_type,   subs_column = substance_reason ) #> Error in eval(expr, envir, enclos): object 'substance_reason' not found head(substances[c('substance_group', 'substance_reason')]) #> Error in eval(expr, envir, enclos): object 'substances' not found"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean sanction dates — clean_dates","title":"Clean sanction dates — clean_dates","text":"Clean sanction dates","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean sanction dates — clean_dates","text":"","code":"clean_dates(df, date_col, split = \"updated\", pattern = \"original\")"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean sanction dates — clean_dates","text":"df processed USADA dataset messy dates date_col sanction date column (usually sanction_announced) split regex pass split argument strsplit() (defaults \"updated\") pattern regex non-date pattern (defaults \"original\")","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean sanction dates — clean_dates","text":"tibble cleaned dates","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean sanction dates — clean_dates","text":"","code":"example_sanction_dates #>                   athlete                                ugly_dates #> 1              jha, kanak  original: 3/20/2023; updated: 12/01/2023 #> 2         prempeh, ernest original: 05/07/2019; updated: 02/04/2022 #> 3          ngetich, eliud     original: 09/03/21; updated: 01/25/22 #> 4              gehm, zach original:  11/04/2019;updated: 05/17/2021 #> 5            hudson, ryan   original 12/20/2018; updated 11/04/2020 #> 6       paparella, flavia   original: 10/19/2020updated: 01/05/2021 #> 7          murdock, vince original: 09/05/2019; updated: 08/26/2020 #> 8         rante, danielle original: 07/22/2020, updated: 11/03/2022 #> 9        werdum, fabricio   original 09/11/2018; updated 01/16/2020 #> 10         jones, stirley original: 06/17/2019; updated: 12/16/2019 #> 11               hay, amy original: 10/31/2017; updated: 12/16/2019 #> 12           orbon, joane original: 08/12/2019; updated: 09/10/2019 #> 13          ribas, amanda  original: 01/10/2018; updated 05/03/2019 #> 14     saccente, nicholas original: 02/14/2017; updated: 12/11/2018 #> 15           miyao, paulo  original: 05/10/2017;updated: 11/27/2018 #> 16 garcia del moral, luis  original: 07/10/2012;updated: 10/26/2018 #> 17        bruyneel, johan  original: 04/22/2014;updated: 10/24/2018 #> 18   celaya lazama, pedro  original: 04/22/2014;updated: 10/24/2018 #> 19            marti, jose  original: 04/22/2014;updated: 10/24/2018 #> 20         moffett, shaun   original: 04/24/2018updated: 10/19/2018 #> 21           hunter, adam original: 10/28/2016; updated: 09/26/2018 #> 22           bailey, ryan original: 08/03/2017; updated: 12/01/2017 #> 23          thomas, tammy original: 08/30/2002; updated: 02/13/2017 #> 24           tovar, oscar original: 10/28/2015; updated: 10/04/2016 #> 25       fischbach, dylan original: 12/18/2015; updated: 04/11/2016 #> 26            lea, robert original: 12/17/2015; updated: 02/25/2016 #> 27        trafeh, mohamed original: 12/18/2014; updated: 08/25/2015 #> 28      dotti, juan pablo original: 10/20/2011; updated: 06/05/2013 #> 29       oliveira, flavia  original: 04/13/2010; updated 12/10/2010 #> 30          young, jerome original: 11/10/2004; updated: 06/17/2008  clean_dates( df = example_sanction_dates, date_col = \"ugly_dates\", split = \"updated\", pattern = \"original\") #>                   athlete                                ugly_dates #> 1              jha, kanak  original: 3/20/2023; updated: 12/01/2023 #> 2         prempeh, ernest original: 05/07/2019; updated: 02/04/2022 #> 3          ngetich, eliud     original: 09/03/21; updated: 01/25/22 #> 4              gehm, zach original:  11/04/2019;updated: 05/17/2021 #> 5            hudson, ryan   original 12/20/2018; updated 11/04/2020 #> 6       paparella, flavia   original: 10/19/2020updated: 01/05/2021 #> 7          murdock, vince original: 09/05/2019; updated: 08/26/2020 #> 8         rante, danielle original: 07/22/2020, updated: 11/03/2022 #> 9        werdum, fabricio   original 09/11/2018; updated 01/16/2020 #> 10         jones, stirley original: 06/17/2019; updated: 12/16/2019 #> 11               hay, amy original: 10/31/2017; updated: 12/16/2019 #> 12           orbon, joane original: 08/12/2019; updated: 09/10/2019 #> 13          ribas, amanda  original: 01/10/2018; updated 05/03/2019 #> 14     saccente, nicholas original: 02/14/2017; updated: 12/11/2018 #> 15           miyao, paulo  original: 05/10/2017;updated: 11/27/2018 #> 16 garcia del moral, luis  original: 07/10/2012;updated: 10/26/2018 #> 17        bruyneel, johan  original: 04/22/2014;updated: 10/24/2018 #> 18   celaya lazama, pedro  original: 04/22/2014;updated: 10/24/2018 #> 19            marti, jose  original: 04/22/2014;updated: 10/24/2018 #> 20         moffett, shaun   original: 04/24/2018updated: 10/19/2018 #> 21           hunter, adam original: 10/28/2016; updated: 09/26/2018 #> 22           bailey, ryan original: 08/03/2017; updated: 12/01/2017 #> 23          thomas, tammy original: 08/30/2002; updated: 02/13/2017 #> 24           tovar, oscar original: 10/28/2015; updated: 10/04/2016 #> 25       fischbach, dylan original: 12/18/2015; updated: 04/11/2016 #> 26            lea, robert original: 12/17/2015; updated: 02/25/2016 #> 27        trafeh, mohamed original: 12/18/2014; updated: 08/25/2015 #> 28      dotti, juan pablo original: 10/20/2011; updated: 06/05/2013 #> 29       oliveira, flavia  original: 04/13/2010; updated 12/10/2010 #> 30          young, jerome original: 11/10/2004; updated: 06/17/2008 #>    pattern_date split_date #> 1    2023-03-20 2023-12-01 #> 2    2019-05-07 2022-02-04 #> 3      21-09-03   22-01-25 #> 4    2019-11-04 2021-05-17 #> 5    2018-12-20 2020-11-04 #> 6    2020-10-19 2021-01-05 #> 7    2019-09-05 2020-08-26 #> 8    2020-07-22 2022-11-03 #> 9    2018-09-11 2020-01-16 #> 10   2019-06-17 2019-12-16 #> 11   2017-10-31 2019-12-16 #> 12   2019-08-12 2019-09-10 #> 13   2018-01-10 2019-05-03 #> 14   2017-02-14 2018-12-11 #> 15   2017-05-10 2018-11-27 #> 16   2012-07-10 2018-10-26 #> 17   2014-04-22 2018-10-24 #> 18   2014-04-22 2018-10-24 #> 19   2014-04-22 2018-10-24 #> 20   2018-04-24 2018-10-19 #> 21   2016-10-28 2018-09-26 #> 22   2017-08-03 2017-12-01 #> 23   2002-08-30 2017-02-13 #> 24   2015-10-28 2016-10-04 #> 25   2015-12-18 2016-04-11 #> 26   2015-12-17 2016-02-25 #> 27   2014-12-18 2015-08-25 #> 28   2011-10-20 2013-06-05 #> 29   2010-04-13 2010-12-10 #> 30   2004-11-10 2008-06-17"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_sports.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean/tidy USADA sports — clean_sports","title":"Clean/tidy USADA sports — clean_sports","text":"Clean/tidy USADA sports","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_sports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean/tidy USADA sports — clean_sports","text":"","code":"clean_sports(df, sport_col, tidy = TRUE)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_sports.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean/tidy USADA sports — clean_sports","text":"df data.frame/tibble processed USADA dataset messy sports sport_col character sport column (usually sport) tidy logical. Tidy sports cleaning/wrangling?","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clean_sports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean/tidy USADA sports — clean_sports","text":"tibble cleaned sports","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clip_top_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy the path to top data file in extdata/ folder on the clipboard — clip_top_file","title":"Copy the path to top data file in extdata/ folder on the clipboard — clip_top_file","text":"Copy path top data file extdata/ folder clipboard","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clip_top_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy the path to top data file in extdata/ folder on the clipboard — clip_top_file","text":"","code":"clip_top_file(ext, pth, ctime)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clip_top_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy the path to top data file in extdata/ folder on the clipboard — clip_top_file","text":"ext file extension. Default 'csv', accepts: 'rds', 'txt', 'tsv', 'dat' pth path extdata subfolder","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/clip_top_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy the path to top data file in extdata/ folder on the clipboard — clip_top_file","text":"list extension, path, modification time recent file.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_word_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regular expression with word boundaries — create_word_boundary","title":"Create a regular expression with word boundaries — create_word_boundary","text":"Create regular expression word boundaries","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_word_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regular expression with word boundaries — create_word_boundary","text":"","code":"create_word_boundary(string)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_word_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regular expression with word boundaries — create_word_boundary","text":"string character vector items","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_word_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regular expression with word boundaries — create_word_boundary","text":"wb_regex regular expression","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/create_word_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a regular expression with word boundaries — create_word_boundary","text":"","code":"require(stringr) #> Loading required package: stringr wb_regex <- create_word_boundary(c(\"pink\", \"salmon.\")) str_view(stringr::sentences, wb_regex, match = TRUE) #>  [12] │ A rod is used to catch <pink> <salmon>. #> [714] │ A <pink> shell was found on the sandy beach."},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert date/time stamp — dtstamp","title":"Insert date/time stamp — dtstamp","text":"Insert date/time stamp","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert date/time stamp — dtstamp","text":"","code":"dtstamp(include_time = FALSE, side = \"none\")"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert date/time stamp — dtstamp","text":"include_time logical, include time? side include underscore (_) 'left' 'right' side (default 'none')","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert date/time stamp — dtstamp","text":"polished date (date time) stamp","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/dtstamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert date/time stamp — dtstamp","text":"","code":"dtstamp() #> [1] \"2023-12-21\" dtstamp(TRUE) #> [1] \"2023-12-21-191639\" dtstamp(FALSE, \"r\") #> [1] \"2023-12-21_\" dtstamp(TRUE, \"l\") #> [1] \"_2023-12-21-191639\""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data object to path — export_data","title":"Export data object to path — export_data","text":"export_data() export given data.frame tibble specified path data stamp prefix.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data object to path — export_data","text":"","code":"export_data(x, path = \"\", type = \"csv\")"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data object to path — export_data","text":"x dataset export path string, path folder type string, type exported file","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data object to path — export_data","text":"exported data message","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Export data to inst/extdata/ or inst/extdata/raw — export_extdata","title":"Export data to inst/extdata/ or inst/extdata/raw — export_extdata","text":"Export data inst/extdata/ inst/extdata/raw","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export data to inst/extdata/ or inst/extdata/raw — export_extdata","text":"","code":"export_extdata(x, path = \"\", type = \"csv\")"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export data to inst/extdata/ or inst/extdata/raw — export_extdata","text":"x data export path path 'inst/' folder ('inst/' folder!) type logical, raw dataset?","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/export_extdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export data to inst/extdata/ or inst/extdata/raw — export_extdata","text":"exported data","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the most recent modification date — get_recent","title":"Return the most recent modification date — get_recent","text":"Return recent modification date","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the most recent modification date — get_recent","text":"","code":"get_recent(pth = \".\", full = FALSE)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the most recent modification date — get_recent","text":"pth path file folder full return datetime (instead date)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the most recent modification date — get_recent","text":"recently modified file","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the most recent modification date — get_recent","text":"","code":"get_recent(\"wrong\") #> Error in get_recent(\"wrong\"): Sorry--this is not a valid file path get_recent(\"inst/extdata/\") #> Error in get_recent(\"inst/extdata/\"): Sorry--this is not a valid file path get_recent(\"inst/extdata/raw\", full = TRUE) #> Error in get_recent(\"inst/extdata/raw\", full = TRUE): Sorry--this is not a valid file path"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the most recent data file in folder — get_recent_file","title":"Return the most recent data file in folder — get_recent_file","text":"Return recent data file folder","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the most recent data file in folder — get_recent_file","text":"","code":"get_recent_file(path = \"default\", regex = NULL, ext = \".csv\")"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the most recent data file in folder — get_recent_file","text":"path path data folder regex regular expression pattern passed list.files() ext file extension. Default 'csv', accepts: 'rds', 'txt', 'tsv', 'dat'","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/get_recent_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the most recent data file in folder — get_recent_file","text":"path recent file","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/guess_basename.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess filename for download from url — guess_basename","title":"Guess filename for download from url — guess_basename","text":"Guess filename download url","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/guess_basename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess filename for download from url — guess_basename","text":"","code":"guess_basename(x)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/guess_basename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess filename for download from url — guess_basename","text":"x url guess filename ","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":null,"dir":"Reference","previous_headings":"","what":"Not in (not-in operator for R.) — %nin%","title":"Not in (not-in operator for R.) — %nin%","text":"(-operator R.)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in (not-in operator for R.) — %nin%","text":"","code":"x %nin% y"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in (not-in operator for R.) — %nin%","text":"x vector NULL: values matched. y vector NULL: values matched .","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not in (not-in operator for R.) — %nin%","text":"negation %%.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/nin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not in (not-in operator for R.) — %nin%","text":"","code":"1 %nin% 2:10 #> [1] TRUE c(\"a\", \"b\") %nin% c(\"a\", \"c\", \"d\") #> [1] FALSE  TRUE"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/otherwise.html","id":null,"dir":"Reference","previous_headings":"","what":"null-coalescing operator. See purrr for details. — %otherwise%","title":"null-coalescing operator. See purrr for details. — %otherwise%","text":"null-coalescing operator. See purrr details.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/otherwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"null-coalescing operator. See purrr for details. — %otherwise%","text":"","code":"lhs %otherwise% rhs"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/otherwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"null-coalescing operator. See purrr for details. — %otherwise%","text":"lhs left hand side rhs right hand side","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/pivot_term_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse string into individual terms (as tibble) — pivot_term_long","title":"Parse string into individual terms (as tibble) — pivot_term_long","text":"Parse string individual terms (tibble)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/pivot_term_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse string into individual terms (as tibble) — pivot_term_long","text":"","code":"pivot_term_long(term, sep = \"[^[:alnum:]]+\")"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/pivot_term_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse string into individual terms (as tibble) — pivot_term_long","text":"term","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/pivot_term_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse string into individual terms (as tibble) — pivot_term_long","text":"tibble unique terms term","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/pivot_term_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse string into individual terms (as tibble) — pivot_term_long","text":"","code":"pivot_term_long(term = \"A large size in stockings is hard to sell.\") #>   unique_items                                       term #> 1            A A large size in stockings is hard to sell. #> 2        large                                       <NA> #> 3         size                                       <NA> #> 4           in                                       <NA> #> 5    stockings                                       <NA> #> 6           is                                       <NA> #> 7         hard                                       <NA> #> 8           to                                       <NA> #> 9         sell                                       <NA>"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Polite download — polite_download_file","title":"Polite download — polite_download_file","text":"Polite download","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polite download — polite_download_file","text":"","code":"polite_download_file(   url,   destfile = guess_basename(url),   ...,   quiet = !verbose,   mode = \"wb\",   path = \"downloads/\",   user_agent = paste0(\"polite \", getOption(\"HTTPUserAgent\")),   delay = 5,   force = FALSE,   overwrite = FALSE,   verbose = FALSE )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polite download — polite_download_file","text":"url web address file downloaded destfile name destination file ... additional arguments passed download.file quiet default value inverse  verbose mode download mode. Default value \"wb\" path path save. Default path downloads/ user_agent default value paste0(\"polite \", getOption(\"HTTPUserAgent\")) delay default value equal 5 force force re-download robots.txt overwrite overwrite downloaded file. Default value FALSE verbose default value FALSE","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_fetch_rtxt.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","title":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","text":"Function get robots.txt structured form. Memoised","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_fetch_rtxt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","text":"","code":"polite_fetch_rtxt(..., user_agent, delay, verbose)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_fetch_rtxt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to get robots.txt is structured form. Memoised — polite_fetch_rtxt","text":"... arguments passed robotstxt::robotstxt() user_agent user agent string delay default delay verbose logical","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_read_html.html","id":null,"dir":"Reference","previous_headings":"","what":"function that actually fetches response from the web — polite_read_html","title":"function that actually fetches response from the web — polite_read_html","text":"function actually fetches response web","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_read_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function that actually fetches response from the web — polite_read_html","text":"","code":"polite_read_html(   url,   ...,   delay = 5,   user_agent = paste0(\"polite \", getOption(\"HTTPUserAgent\"), \"bot\"),   force = FALSE,   verbose = FALSE )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/polite_read_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function that actually fetches response from the web — polite_read_html","text":"url web address scraping ... arguments passed httr::GET() delay scraping delay. Default 5 sec user_agent user agent string. Default value paste0(\"polite \", getOption(\"HTTPUserAgent\"), \"bot\") force force re-download robots.txt verbose default FALSE","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Process raw data — process_text","title":"Process raw data — process_text","text":"Process raw data","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process raw data — process_text","text":"","code":"process_text(raw_data, fct = FALSE)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process raw data — process_text","text":"raw_data raw dataset fct include factors?","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process raw data — process_text","text":"data standardized names, lowercase text, etc.","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/process_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process raw data — process_text","text":"","code":"require(palmerpenguins) #> Loading required package: palmerpenguins str(palmerpenguins::penguins_raw) #> tibble [344 × 17] (S3: tbl_df/tbl/data.frame) #>  $ studyName          : chr [1:344] \"PAL0708\" \"PAL0708\" \"PAL0708\" \"PAL0708\" ... #>  $ Sample Number      : num [1:344] 1 2 3 4 5 6 7 8 9 10 ... #>  $ Species            : chr [1:344] \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" \"Adelie Penguin (Pygoscelis adeliae)\" ... #>  $ Region             : chr [1:344] \"Anvers\" \"Anvers\" \"Anvers\" \"Anvers\" ... #>  $ Island             : chr [1:344] \"Torgersen\" \"Torgersen\" \"Torgersen\" \"Torgersen\" ... #>  $ Stage              : chr [1:344] \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" \"Adult, 1 Egg Stage\" ... #>  $ Individual ID      : chr [1:344] \"N1A1\" \"N1A2\" \"N2A1\" \"N2A2\" ... #>  $ Clutch Completion  : chr [1:344] \"Yes\" \"Yes\" \"Yes\" \"Yes\" ... #>  $ Date Egg           : Date[1:344], format: \"2007-11-11\" \"2007-11-11\" ... #>  $ Culmen Length (mm) : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ... #>  $ Culmen Depth (mm)  : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ... #>  $ Flipper Length (mm): num [1:344] 181 186 195 NA 193 190 181 195 193 190 ... #>  $ Body Mass (g)      : num [1:344] 3750 3800 3250 NA 3450 ... #>  $ Sex                : chr [1:344] \"MALE\" \"FEMALE\" \"FEMALE\" NA ... #>  $ Delta 15 N (o/oo)  : num [1:344] NA 8.95 8.37 NA 8.77 ... #>  $ Delta 13 C (o/oo)  : num [1:344] NA -24.7 -25.3 NA -25.3 ... #>  $ Comments           : chr [1:344] \"Not enough blood for isotopes.\" NA NA \"Adult not sampled.\" ... #>  - attr(*, \"spec\")=List of 3 #>   ..$ cols   :List of 17 #>   .. ..$ studyName          : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Sample Number      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Species            : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Region             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Island             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Stage              : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Individual ID      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Clutch Completion  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Date Egg           :List of 1 #>   .. .. ..$ format: chr \"\" #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_date\" \"collector\" #>   .. ..$ Culmen Length (mm) : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Culmen Depth (mm)  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Flipper Length (mm): list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Body Mass (g)      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Sex                : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Delta 15 N (o/oo)  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Delta 13 C (o/oo)  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Comments           : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   ..$ default: list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   ..$ skip   : num 1 #>   ..- attr(*, \"class\")= chr \"col_spec\" # compare to str(process_text(palmerpenguins::penguins_raw)) #> 'data.frame':\t344 obs. of  17 variables: #>  $ studyname        : chr  \"pal0708\" \"pal0708\" \"pal0708\" \"pal0708\" ... #>  $ sample_number    : num  1 2 3 4 5 6 7 8 9 10 ... #>  $ species          : chr  \"adelie penguin (pygoscelis adeliae)\" \"adelie penguin (pygoscelis adeliae)\" \"adelie penguin (pygoscelis adeliae)\" \"adelie penguin (pygoscelis adeliae)\" ... #>  $ region           : chr  \"anvers\" \"anvers\" \"anvers\" \"anvers\" ... #>  $ island           : chr  \"torgersen\" \"torgersen\" \"torgersen\" \"torgersen\" ... #>  $ stage            : chr  \"adult, 1 egg stage\" \"adult, 1 egg stage\" \"adult, 1 egg stage\" \"adult, 1 egg stage\" ... #>  $ individual_id    : chr  \"n1a1\" \"n1a2\" \"n2a1\" \"n2a2\" ... #>  $ clutch_completion: chr  \"yes\" \"yes\" \"yes\" \"yes\" ... #>  $ date_egg         : Date, format: \"2007-11-11\" \"2007-11-11\" ... #>  $ culmen_length_mm : num  39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ... #>  $ culmen_depth_mm  : num  18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ... #>  $ flipper_length_mm: num  181 186 195 NA 193 190 181 195 193 190 ... #>  $ body_mass_g      : num  3750 3800 3250 NA 3450 ... #>  $ sex              : chr  \"male\" \"female\" \"female\" NA ... #>  $ delta_15_n_o_oo  : num  NA 8.95 8.37 NA 8.77 ... #>  $ delta_13_c_o_oo  : num  NA -24.7 -25.3 NA -25.3 ... #>  $ comments         : chr  \"not enough blood for isotopes.\" NA NA \"adult not sampled.\" ... #>  - attr(*, \"spec\")=List of 3 #>   ..$ cols   :List of 17 #>   .. ..$ studyName          : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Sample Number      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Species            : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Region             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Island             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Stage              : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Individual ID      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Clutch Completion  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Date Egg           :List of 1 #>   .. .. ..$ format: chr \"\" #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_date\" \"collector\" #>   .. ..$ Culmen Length (mm) : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Culmen Depth (mm)  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Flipper Length (mm): list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Body Mass (g)      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Sex                : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Delta 15 N (o/oo)  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Delta 13 C (o/oo)  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Comments           : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   ..$ default: list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   ..$ skip   : num 1 #>   ..- attr(*, \"class\")= chr \"col_spec\""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/reclass_substance.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-classify a specific WADA substance — reclass_substance","title":"Re-classify a specific WADA substance — reclass_substance","text":"Re-classify specific WADA substance","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/reclass_substance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-classify a specific WADA substance — reclass_substance","text":"","code":"reclass_substance(   df,   substance,   value,   substance_col = \"substance_reason\",   wb = FALSE )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/reclass_substance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-classify a specific WADA substance — reclass_substance","text":"df data USADA website substance character string banned WADA substances value character string substance group value substance_col column substances/reasons sanctions (assumes substance_reason). wb logical, include word boundary?","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/reclass_substance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-classify a specific WADA substance — reclass_substance","text":"substance dataset newly classified substances","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/scrape_sanctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrape the UASA website sanctions data — scrape_sanctions","title":"Scrape the UASA website sanctions data — scrape_sanctions","text":"Scrape UASA website sanctions data","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/scrape_sanctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrape the UASA website sanctions data — scrape_sanctions","text":"","code":"scrape_sanctions(dest_path)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/scrape_sanctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrape the UASA website sanctions data — scrape_sanctions","text":"tibble raw sanctions data","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/scrape_sanctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrape the UASA website sanctions data — scrape_sanctions","text":"","code":"# scrape_sanctions()"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/split_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate column into multiple columns — split_cols","title":"Separate column into multiple columns — split_cols","text":"Separate column multiple columns","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/split_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate column into multiple columns — split_cols","text":"","code":"split_cols(data, col, pattern = \"[^[:alnum:]]+\", col_prefix)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/split_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate column into multiple columns — split_cols","text":"data data.frame tibble col column separate pattern regular expression pattern passed strsplit() col_prefix prefix new columns","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/split_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate column into multiple columns — split_cols","text":"data.frame split columns","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/split_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separate column into multiple columns — split_cols","text":"","code":"d <- data.frame(value = c(29L, 91L, 39L, 28L, 12L),                 name = c(\"John\", \"John, Jacob\",                          \"John, Jacob, Jingleheimer\",                          \"Jingleheimer, Schmidt\",                          \"JJJ, Schmidt\")) split_cols(data = d, col = \"name\", col_prefix = \"names\") #>   value                      name      names_1 names_2      names_3 #> 1    29                      John         John    <NA>         <NA> #> 2    91               John, Jacob         John   Jacob         <NA> #> 3    39 John, Jacob, Jingleheimer         John   Jacob Jingleheimer #> 4    28     Jingleheimer, Schmidt Jingleheimer Schmidt         <NA> #> 5    12              JJJ, Schmidt          JJJ Schmidt         <NA>"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot2 theme (doping data) — theme_ggp2g","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"ggplot2 theme (doping data)","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"","code":"theme_ggp2g(   base_size = 11,   base_family = \"Ubuntu\",   base_line_size = base_size/22,   base_rect_size = base_size/22 )"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"base_size size font base_family family font base_line_size size lines base graph base_rect_size size rectangle base graph","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/theme_ggp2g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot2 theme (doping data) — theme_ggp2g","text":"ggplot object","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/verify_inst_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify inst/ path — verify_inst_path","title":"Verify inst/ path — verify_inst_path","text":"Verify inst/ path","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/verify_inst_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify inst/ path — verify_inst_path","text":"","code":"verify_inst_path(inst_path = NULL)"},{"path":"https://mjfrigaard.github.io/dopingdata/reference/verify_inst_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify inst/ path — verify_inst_path","text":"inst_path","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/reference/verify_inst_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify inst/ path — verify_inst_path","text":"invisible","code":""},{"path":"https://mjfrigaard.github.io/dopingdata/news/index.html","id":"dopingdata-0009000","dir":"Changelog","previous_headings":"","what":"dopingdata 0.0.0.9000","title":"dopingdata 0.0.0.9000","text":"Added NEWS.md file track changes package. Pushed site gh-pages branch using pkgdown","code":""}]
